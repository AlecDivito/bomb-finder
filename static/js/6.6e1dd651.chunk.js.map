{"version":3,"sources":["components/Button.tsx","models/GameBoardTypes.ts","util/Random.ts","logic/BombFinderPieceRenderer.ts","util/toHHMMSS.ts","assets/hourglass.svg","pages/game-won.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Button","_ref","type","disabled","className","text","onClick","disabledClass","classes","concat","a","createElement","Visibility","d","__webpack_exports__","isVisible","isMarkable","isMarked","CellState","incrementCellValue","decrementCellValue","isBomb","v","VISIBLE","VISIBLY_SATISFIED","MARKED","INVISIBLE","cell","visibility","value","cv","undefined","RandInRange","min","max","Math","floor","random","BombFinderPieceRenderer","settings","Object","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","RECTANGLE_REDIS_DEGREE","LINE_WIDTH_DEGREE","ROTATING_LINE_WIDTH_DEGREE","PIECE_MARKED_COLOR","invisiblePieceCanvas","invisibleMarkedPieceCanvas","staticPieceCanvas","pieceAnimations","lineWidth","pieceLength","gapSize","simpleRender","exampleCellValue","reverseTiming","defaultCellSize","gridGapSize","setSpinningCubes","spinningCubes","document","height","width","drawInvisiblePiece","getContext","i","ctx","drawVisibleCell","num","push","delta","length","reverse","index","oldTime","newTime","sin","every","b","ipcContext","impcContext","clearRect","x","y","arguments","save","restore","drawImage","hover","offset","drawHover","getIndexByCell","overrideColor","s","rotation","pow","drawRotatingSquare","beginPath","strokeStyle","drawSquare","stroke","closePath","worldX","worldY","cellLength","radius","totalLength","translate","rotate","moveTo","lineTo","quadraticCurveTo","alpha","step","cellValue","arc","PI","innerX","innerY","gradient","createRadialGradient","addColorStop","fillStyle","fill","font","ypos","xpos","textAlign","textBaseline","fillText","String","toHHMMSS","time","hours","minutes","seconds","timeString","module","exports","p","GameWon","props","_this","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","keepUpdating","canvas","context2D","game","stats","pieceRenderer","playAgain","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","_ref2","difficulty","bombs","newGame","wrap","_context","prev","next","Games","Create","sent","setState","gameId","id","stop","draw","update","fillRect","state","dimensions","drawPlaceHolder","rafId","requestAnimationFrame","loading","winningText","GetById","match","params","Statistics","GetStats","firstMoveHandicap","vibrantColors","vibration","timestamp","Date","switchGameTimeToOne","worstTime","bestTime","moves","totalMoves","getElementById","logAndDestroy","cancelAnimationFrame","react__WEBPACK_IMPORTED_MODULE_7___default","_components_Loading__WEBPACK_IMPORTED_MODULE_11__","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","_ref3","src","hourglass","alt","_components_Button__WEBPACK_IMPORTED_MODULE_16__","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","Component"],"mappings":"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","file":"static/js/6.6e1dd651.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Button.css\"\n\ninterface Props {\n    type: \"button\" | \"submit\";\n    className?: string;\n    disabled?: boolean;\n    text: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst Button: React.FC<Props> = ({ type, disabled, className, text, onClick }) => {\n    const disabledClass = (disabled) ? \"button disabled\" : \"button\";\n    const classes = (className) ? `${className} ${disabledClass}` : disabledClass;\n    if (onClick) {\n        return <button className={classes}\n            disabled={disabled}\n            type={type}\n            onClick={onClick}>\n            {text}\n        </button>\n    }\n    return <button className={classes} disabled={disabled} type={type}>{text}</button>\n}\n\nexport default Button;","export enum Visibility {\n    INVISIBLE, // show default animation\n    VISIBLE,   // show the cell value\n    VISIBLY_SATISFIED, // show the cell's value in diffrent color\n    MARKED,    // show marked cell\n}\n\nexport const isVisible = (v: Visibility) => \n    v === Visibility.VISIBLE || v === Visibility.VISIBLY_SATISFIED;\n\nexport const isMarkable = (v: Visibility) =>\n    v === Visibility.MARKED || v === Visibility.INVISIBLE;\n\nexport const isMarked = (cell: Cell) => \n    cell.visibility === Visibility.MARKED;\n\nexport enum CellState {\n    BOMB,  // cell is a bomb\n    CLEAN, // cell is clean\n}\n\nexport type CellValue = null | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\nexport const incrementCellValue = (value?: CellValue): CellValue => {\n    switch (value) {\n        case 0: return 1;\n        case 1: return 2;\n        case 2: return 3;\n        case 3: return 4;\n        case 4: return 5;\n        case 5: return 6;\n        case 6: return 7;\n        case 7: return 8;\n        // these last 2 cases should rarely be called\n        case 8: return 8;\n        default: return null\n    }\n}\n\nexport const decrementCellValue = (value?: CellValue): CellValue => {\n    switch (value) {\n        case 1: return 0;\n        case 2: return 1;\n        case 3: return 2;\n        case 4: return 3;\n        case 5: return 4;\n        case 6: return 5;\n        case 7: return 6;\n        case 8: return 7;\n        // these last 2 cases should rarely be called\n        case 0: return 0;\n        default: return null\n    }\n}\n\nexport const isBomb = (cv?: CellValue) => cv === null || cv === undefined;\n\nexport interface Cell {\n    hover: boolean;\n    visibility: Visibility;\n    readonly state: CellState;\n    readonly value?: CellValue;\n}\n","\n\nexport default function RandInRange(min: number, max: number) {\n    return Math.floor(Math.random() * max) + min;\n}","import { Cell, Visibility, isBomb, CellValue } from \"../models/GameBoardTypes\";\nimport RandInRange from \"../util/Random\";\nimport { IPreferences } from \"../models/Preferences\";\n\nexport interface CanvasWindow {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\n/**\n * All the renderer cares about is rendering\n * a piece of the board.\n * \n * When drawing, you will pass in all the cell\n * details and it will be drawn\n */\nexport default class BombFinderPieceRenderer {\n    /**\n     * Constants\n     */\n    private readonly RECTANGLE_REDIS_DEGREE = 6;\n    private readonly LINE_WIDTH_DEGREE = 20;\n    private readonly ROTATING_LINE_WIDTH_DEGREE = 60;\n    private readonly PIECE_MARKED_COLOR = \"#3396ff\";\n\n    /**\n     * Invisible\n     * Invisible Marked\n     * 0 cell\n     * bomb cell\n     * 1-8 cells\n     * 1-8 cells satisfied\n     */\n    // the offsreen canvas can be this.pieceLength * 20 by this.pieceLength\n    // then when we are drawing we just grab the offset\n    // why not 3 diffrent canvases, animated get there own\n\n    // TODO: Add more off screen canvas updating\n    private invisiblePieceCanvas: HTMLCanvasElement;\n    private invisibleMarkedPieceCanvas: HTMLCanvasElement;\n    private staticPieceCanvas: HTMLCanvasElement[] = [];\n    // private pieceAnimations: AnimationTimer[] = [];\n    private pieceAnimations: number[] = [];\n\n    private lineWidth: number;\n    private pieceLength: number;\n    private gapSize: number;\n    private simpleRender: boolean;\n    private exampleCellValue = RandInRange(0, 8);\n\n    constructor(settings: IPreferences) {\n        this.lineWidth = settings.defaultCellSize / this.LINE_WIDTH_DEGREE;\n        this.pieceLength = settings.defaultCellSize - this.lineWidth * 2;\n        this.gapSize = settings.gridGapSize;\n        this.simpleRender = settings.simpleRender;\n        this.setSpinningCubes(settings.spinningCubes);\n        // set up canvas\n        this.invisiblePieceCanvas = document.createElement(\"canvas\");\n        this.invisiblePieceCanvas.height = settings.defaultCellSize;\n        this.invisiblePieceCanvas.width =  settings.defaultCellSize;\n        this.drawInvisiblePiece(this.invisiblePieceCanvas.getContext('2d')!, this.lineWidth, this.lineWidth);\n\n        this.invisibleMarkedPieceCanvas = document.createElement(\"canvas\");\n        this.invisibleMarkedPieceCanvas.height = settings.defaultCellSize;\n        this.invisibleMarkedPieceCanvas.width = settings.defaultCellSize;\n        this.drawInvisiblePiece(this.invisibleMarkedPieceCanvas.getContext('2d')!, this.lineWidth, this.lineWidth, this.PIECE_MARKED_COLOR);\n\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i] = document.createElement(\"canvas\");\n            this.staticPieceCanvas[i].width = settings.defaultCellSize;\n            this.staticPieceCanvas[i].height = settings.defaultCellSize;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, this.lineWidth, this.lineWidth, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, this.lineWidth, this.lineWidth, num, this.PIECE_MARKED_COLOR);\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, this.lineWidth, this.lineWidth, 0);\n            } else {\n                this.drawVisibleCell(ctx, this.lineWidth, this.lineWidth, undefined);\n            }\n        }\n    }\n\n    /**\n     * Update the size of a cells width and height\n     * @param value height and width to set the piece\n     */\n    setCellSize(value: number) {\n        this.lineWidth = value / this.LINE_WIDTH_DEGREE;\n        this.pieceLength = value - this.lineWidth * 2;\n        // hard code invis\n        this.invisiblePieceCanvas.height = value;\n        this.invisiblePieceCanvas.width = value;\n        // marked invis\n        this.invisibleMarkedPieceCanvas.height = value;\n        this.invisibleMarkedPieceCanvas.width = value;\n        // everything else\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i].width = value;\n            this.staticPieceCanvas[i].height = value;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 0, 0, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 0, 0, num, this.PIECE_MARKED_COLOR);\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 0, 0, 0);\n            } else {\n                this.drawVisibleCell(ctx, 0, 0, undefined);\n            }\n        }\n    }\n\n    /**\n     * Set the gab size found between pieces\n     * @param value size of gap in pixels\n     */\n    setGapSize(value: number) {\n        this.gapSize = value;\n    }\n\n    /**\n     * Set the number of cubes that spin inside of invisible pieces\n     * @param value number of spinning cubes found on invisible pieces\n     */\n    setSpinningCubes(value: number) {\n        this.pieceAnimations = [];\n        for (let i = value + 1; i >= 1; i--) {\n            this.pieceAnimations.push(0);\n                // new AnimationTimer(90 * i, Math.pow(i + 1, i * .035) - 1, LoopOptions.ALTERNATE));\n        }\n    }\n\n    /**\n     * Toggle simple render option\n     * @param value property to toggle simple render to\n     */\n    setSimpleRender(value: boolean) {\n        this.simpleRender = value;\n    }\n\n    private reverseTiming: boolean = false;\n    /**\n     * Update dynamic pieces (spinning cubes)\n     * return early if simple render is on\n     * @param delta elapsed seconds\n     */\n    update(delta: number) {\n        if (this.simpleRender || this.pieceAnimations.length === 0) {\n            return;\n        }\n        let reverse: boolean[] = [];\n        for (let i = 0; i < this.pieceAnimations.length; i++) {\n            let index = i;\n            if (this.reverseTiming) {\n                index = this.pieceAnimations.length - i;\n            }\n            const oldTime = this.pieceAnimations[index]\n            const newTime = this.pieceAnimations[index] + (delta * (index) * 1);\n            if (this.reverseTiming) {\n                if (Math.sin(newTime) < Math.sin(oldTime)) {\n                    this.pieceAnimations[index] = newTime;\n                    reverse.push(false);\n                } else {\n                    reverse.push(true);\n                }\n            } else {\n                if (Math.sin(newTime) > Math.sin(oldTime)) {\n                    this.pieceAnimations[index] = newTime;\n                    reverse.push(true);\n                } else {\n                    reverse.push(false);\n                }\n            }\n        }\n        const allSame = reverse.every(b => b === reverse[0]);\n        if (allSame) {\n            this.reverseTiming = !this.reverseTiming;\n        }\n\n        // get context\n        const ipcContext = this.invisiblePieceCanvas.getContext('2d')!;\n        const impcContext = this.invisibleMarkedPieceCanvas.getContext('2d')!;\n        // clear canvas\n        const length = this.pieceLength + (this.lineWidth * 2)\n        ipcContext.clearRect(0, 0, length, length);\n        impcContext.clearRect(0, 0, length, length);\n        // draw canvas\n        this.drawInvisiblePiece(ipcContext, this.lineWidth, this.lineWidth);\n        this.drawInvisiblePiece(impcContext, this.lineWidth, this.lineWidth, this.PIECE_MARKED_COLOR);\n    }\n\n    /**\n     * Create graphical gird cell without actually providing one\n     * @param ctx canvas context\n     * @param x x position\n     * @param y y position\n     * @param visibility Cell visibility\n     */\n    drawPlaceHolder(ctx: CanvasRenderingContext2D, x: number, y: number, visibility: Visibility = Visibility.INVISIBLE) {\n        ctx.save();\n        switch (visibility) {\n            case Visibility.INVISIBLE: this.drawInvisiblePiece(ctx, x, y); break;\n            case Visibility.MARKED: this.drawInvisiblePiece(ctx, x, y, this.PIECE_MARKED_COLOR); break;\n            case Visibility.VISIBLE: this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue); break;\n            case Visibility.VISIBLY_SATISFIED:\n                this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue, this.PIECE_MARKED_COLOR); break;\n        }\n        ctx.restore();\n    }\n\n    /**\n     * Create graphical grid cell\n     * @param ctx canvas\n     * @param cell grid cell\n     * @param x x position\n     * @param y y position\n     */\n    drawPiece(ctx: CanvasRenderingContext2D, cell: Cell, x: number, y: number) {\n        if (cell.visibility === Visibility.INVISIBLE) {\n            ctx.drawImage(this.invisiblePieceCanvas, x, y);\n            if (cell.hover) {\n                const offset = this.lineWidth / 2;\n                this.drawHover(ctx, x + offset, y + offset);\n                // add this as a debug feature cause its actually cool\n                // const index = this.getIndexByCell(cell);\n                // ctx.drawImage(this.staticPieceCanvas[index], x, y);\n            }\n        } else if (cell.visibility === Visibility.MARKED) {\n            ctx.drawImage(this.invisibleMarkedPieceCanvas, x, y);\n        } else {\n            const index = this.getIndexByCell(cell);\n            ctx.drawImage(this.staticPieceCanvas[index], x, y);\n        }\n    }\n\n    /**\n     * get the index of the cached canvas that matches the cell's state\n     * @param cell Cell\n     */\n    private getIndexByCell(cell: Cell) {\n        if (isBomb(cell.value)) {\n            return 17;\n        } else if (cell.value === 0) {\n            return 16;\n        } else {\n            if (cell.visibility === Visibility.VISIBLY_SATISFIED) {\n                return cell.value! - 1 + 8;\n            }\n            return cell.value! - 1;\n        }\n    }\n\n    /**\n     * Draw an invisible piece\n     * @param ctx canvas\n     * @param x x position\n     * @param y y pixel position\n     * @param overrideColor color to use instead of default color (#FFF)\n     */\n    private drawInvisiblePiece(ctx: CanvasRenderingContext2D, x: number, y: number, overrideColor?: string) {\n        if (!this.simpleRender) {\n            ctx.save();\n            let s = this.pieceLength * 0.9;\n            let offset = this.pieceLength * 0.05;\n            for (let i = 1; i < this.pieceAnimations.length + 1; i++) {\n                const rotation =Math.sin(this.pieceAnimations[i]);\n                let index = this.pieceAnimations.length - 1;\n                s += rotation * Math.pow(index, 0.25);\n                offset += (rotation * -Math.pow(index, 0.25)) / 2;\n                this.drawRotatingSquare(ctx, offset + x, y + offset, s, i, rotation, overrideColor);\n                offset += (s / 4) / 2;\n                s = (s / 4) * 3;\n            } \n            ctx.restore();\n        }\n        \n\n        ctx.save();\n        ctx.beginPath();\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"#FFF\";\n        }\n        this.drawSquare(ctx, x, y, this.pieceLength / this.RECTANGLE_REDIS_DEGREE, this.pieceLength);\n\n        ctx.lineWidth = this.lineWidth;\n        ctx.stroke();\n        ctx.closePath();\n        ctx.restore();\n    }\n\n    /**\n     * Draw one rotating cube\n     * @param ctx canvas\n     * @param worldX x pixel position\n     * @param worldY y pixel position\n     * @param cellLength spinning cube width\n     * @param i index\n     * @param rotationDirection direction to rotate\n     * @param overrideColor color to use instead of default color (#FFF)\n     */\n    private drawRotatingSquare(ctx: CanvasRenderingContext2D, worldX: number, worldY: number, cellLength: number,\n        i: number, rotation: number, overrideColor?: string) {\n        const radius = cellLength / this.RECTANGLE_REDIS_DEGREE;\n        let totalLength = cellLength / 2 + (radius * 2);\n        let x = worldX + cellLength / 4 - radius;\n        let y = worldY + cellLength / 4 - radius;\n\n        ctx.save();\n        ctx.beginPath();\n        // Draw the rotating bits inside of the circle\n        ctx.translate(x + + (totalLength / 2), y + totalLength / 2);\n        ctx.rotate(rotation);\n        ctx.translate((x + totalLength / 2) * -1, (y + totalLength / 2) * -1);\n        this.drawSquare(ctx, x, y, radius, totalLength);\n        let lineWidth = this.pieceLength / this.ROTATING_LINE_WIDTH_DEGREE;\n        if (lineWidth < 1) {\n            lineWidth = 1;\n        }\n        ctx.lineWidth = lineWidth;\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"rgba(255, 255, 255, 0.4)\";\n        }\n\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    /**\n     * Draw a square on the canvas\n     * @param ctx canvas\n     * @param x x pixel position\n     * @param y y pixel position\n     * @param radius border radius\n     * @param length width and height of rectangle\n     */\n    private drawSquare(ctx: CanvasRenderingContext2D, x: number, y: number, radius: number, length: number) {\n        // start\n        ctx.moveTo(x + radius, y);\n        // top\n        ctx.lineTo(x + length - radius, y);\n        ctx.quadraticCurveTo(x + length, y, x + length, y + radius);\n        // right\n        ctx.lineTo(x + length, y + length - radius);\n        ctx.quadraticCurveTo(x + length, y + length, x + length - radius, y + length);\n        // bottom\n        ctx.lineTo(x + radius, y + length);\n        ctx.quadraticCurveTo(x, y + length, x, y + length - radius);\n        // left\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n    }\n    \n    /**\n     * Draw multiple squares at different alpha values to give the appearance of \n     * a gradient\n     * @param ctx canvas\n     * @param x x pixel position\n     * @param y y pixel position\n     */\n    private drawHover(ctx: CanvasRenderingContext2D, x: number, y: number) {\n        ctx.save()\n        const gapSize = (this.gapSize / 2)\n        let alpha = 1.0;\n        let step = 1 / gapSize;\n        x += (1 + this.lineWidth) / 2;\n        y += (1 + this.lineWidth) / 2;\n        for (let i = 1; i <= gapSize; i++) {\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(255,255,255, ${alpha})`;\n            this.drawSquare(ctx, x - i, y - i, (this.pieceLength) / this.RECTANGLE_REDIS_DEGREE,\n                this.pieceLength + (i * 2));\n            if ((i + 1) >= (this.gapSize / 2)) {\n                ctx.lineWidth = 1;\n            } else {\n                ctx.lineWidth = 2;\n            }\n            alpha -= step;\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n\n    /**\n     * Draw a visible cell that matches the cell value\n     * @param ctx canvas\n     * @param x x pixel position\n     * @param y y pixel position\n     * @param cellValue bomb state value\n     * @param overrideColor color to use instead of default color\n     */\n    private drawVisibleCell(ctx: CanvasRenderingContext2D, x: number, y: number, cellValue?: CellValue, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        let length = this.pieceLength;\n        if (isBomb(cellValue)) {\n            // let radius = 3;\n            // draw the outline of the shape\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#690721\";\n            ctx.lineWidth = 4;\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n            // draw inner circle\n            ctx.save();\n            ctx.beginPath();\n            length -= 6;\n            ctx.arc(x + 3 + length / 2, y + 3 + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#f00f4b\";\n            ctx.lineWidth = 3;\n            // gradient \n\n            const innerX = x + (length / 2);\n            const innerY = y + (length / 2);\n            var gradient = ctx.createRadialGradient(\n                innerX, innerY, this.pieceLength / 6,\n                innerX, innerY, this.pieceLength / 2);\n\n            // Add three color stops\n            gradient.addColorStop(0, '#333');\n            gradient.addColorStop(1, '#690721');\n\n            // fill shap\n            ctx.fillStyle = gradient;\n            ctx.fill();\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n\n        } else if (cellValue === 0) {\n            this.drawSquare(ctx, x, y, this.pieceLength / this.RECTANGLE_REDIS_DEGREE, this.pieceLength);\n            ctx.lineWidth = this.lineWidth;\n            ctx.strokeStyle = \"gray\";\n        } else {\n            if (overrideColor) {\n                ctx.fillStyle = overrideColor;\n                ctx.strokeStyle = overrideColor;\n            } else {\n                ctx.fillStyle = \"#FFFFFF\";\n                ctx.strokeStyle = \"#FFFFFF\"\n            }\n            // http://www.ckollars.org/canvas-text-centering.html\n            ctx.font = `normal ${this.pieceLength}px sans-serif`;\n            // const measurements = ctx.measureText(String(cell.value));\n            const offset = (this.pieceLength / 2) + (this.lineWidth * 1.5);\n            const ypos = y + (this.pieceLength / 2) + offset;// + this.pieceLength;\n            const xpos = x + (this.pieceLength / 2);\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"bottom\";\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.lineWidth = this.lineWidth;\n            ctx.fillText(String(cellValue), xpos, ypos);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n}","export default function toHHMMSS(time: number) {\n    time = Math.floor(time);\n    const hours = Math.floor(time / 3600);\n    const minutes = Math.floor((time - (hours * 3600)) / 60);\n    const seconds = time - (hours * 3600) - (minutes * 60);\n    let timeString = \"\";\n\n    if (hours > 0) {\n        timeString += (hours < 10) ? `0${hours}:` : `${hours}:`;\n    }\n    timeString += (minutes < 10) ? `0${minutes}:` : `${minutes}:`;\n    timeString += (seconds < 10) ? `0${seconds}` : `${seconds}`;\n\n    return timeString;\n}","module.exports = __webpack_public_path__ + \"static/media/hourglass.63a5448b.svg\";","import React, { Component } from \"react\";\nimport { Link, RouteComponentProps, Redirect } from \"react-router-dom\";\nimport Games from \"../models/Games\";\nimport Loading from \"../components/Loading\";\nimport \"./game-won.css\";\nimport \"../components/Button.css\"\nimport hourglass from \"../assets/hourglass.svg\";\nimport BombFinderPieceRenderer from \"../logic/BombFinderPieceRenderer\";\nimport Button from \"../components/Button\";\nimport { IPreferences } from \"../models/Preferences\";\nimport toHHMMSS from \"../util/toHHMMSS\";\nimport Statistics from \"../models/Statistics\";\n\ninterface ParamProps {\n    id: string;\n}\n\ntype Props = RouteComponentProps<ParamProps>;\n\ntype State = {\n    loading: boolean,\n    dimensions: number;\n    winningText: string;\n    moves?: number,\n    time?: number,\n    difficulty?: string,\n    gameId?: string,\n    rafId?: number,\n}\n\nexport default class GameWon extends Component<Props, State> {\n\n    private keepUpdating: boolean = true;\n    private canvas?: HTMLCanvasElement;\n    private context2D?: CanvasRenderingContext2D;\n    private game?: Games;\n    private stats?: Statistics;\n    private pieceRenderer?: BombFinderPieceRenderer;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: true,\n            dimensions: 0,\n            winningText: \"\",\n        };\n    }\n\n    async componentDidMount() {\n        // TODO: Handle Error when game doesn't exist\n        this.game = await Games.GetById(this.props.match.params.id);\n        this.stats = await Statistics.GetStats(this.game.difficulty);\n        const settings: IPreferences = {\n            defaultCellSize: 120,\n            gridGapSize: 5,\n            spinningCubes: 7,\n            simpleRender: false,\n            firstMoveHandicap: true,\n            vibrantColors: false,\n            vibration: false,\n            timestamp: new Date(),\n        };\n        let switchGameTimeToOne = false;\n        let winningText = \"You win!\";\n        if (Math.floor(this.game.time) >= this.stats.worstTime) {\n            winningText = \"New Low Score!\";\n            if (Math.floor(this.game.time) === 0) {\n                switchGameTimeToOne = true;\n                this.stats.worstTime = 1;\n            } else {\n                this.stats.worstTime = Math.floor(this.game.time);\n            }\n        }\n        if (Math.floor(this.game.time) <= this.stats.bestTime || this.stats.bestTime === 0) {\n            winningText = \"New High Score!\";\n            if (Math.floor(this.game.time) === 0) {\n                switchGameTimeToOne = true;\n                this.stats.bestTime = 1;\n            } else {\n                this.stats.bestTime = Math.floor(this.game.time);\n            }\n        }\n        if (switchGameTimeToOne) {\n            this.game.time = 1;\n        }\n        this.setState({\n            loading: false,\n            winningText,\n            moves: this.game.totalMoves,\n            time: this.game.time,\n            difficulty: this.game.difficulty,\n            dimensions: settings.defaultCellSize + 5\n        });\n        this.canvas = document.getElementById(\"piece-canvas\") as HTMLCanvasElement;\n        this.context2D = this.canvas.getContext('2d')!;\n        this.pieceRenderer = new BombFinderPieceRenderer(settings);\n        requestAnimationFrame(this.draw);\n    }\n\n    componentWillUnmount() {\n        if (this.game) {\n            this.game.logAndDestroy();\n        }\n        if (this.state.rafId) {\n            cancelAnimationFrame(this.state.rafId!);\n        }\n        this.keepUpdating = false;\n    }\n\n    playAgain = async () => {\n        const { difficulty, width, height, bombs } = this.game!;\n        const newGame = await Games.Create(difficulty, width, height, bombs);\n        this.setState({ gameId: newGame.id });\n    }\n\n    public render() {\n        if (this.state.loading) {\n            return <Loading />\n        }\n        if (this.state.gameId) {\n            return <Redirect to={`/game/${this.state.gameId}`} />\n        }\n        const { difficulty, bombs, width, height } = this.game!;\n        return (\n            <div className=\"game-won\">\n                <canvas id=\"piece-canvas\"\n                    width={this.state.dimensions}\n                    height={this.state.dimensions}>\n                    This Device doesn't support the canvas element!\n                </canvas>\n                <div className=\"game-won--statement\">{this.state.winningText}</div>\n                <div className=\"game-won--statement\">{difficulty} ({width}x{height}:{bombs})</div>\n                <div className=\"divider\" />\n                <ul className=\"game-won__stats\">\n                    <li className=\"game-won__stats__item\">\n                        <span>Moves</span>\n                        <br/>\n                        <span>{this.state.moves}</span>\n                    </li>\n                    <li className=\"game-won__stats__item\">\n                        <span>Score</span>\n                        <br/>\n                        <span>{toHHMMSS(this.state.time!)}</span>\n                    </li>\n                    <li className=\"game-won__stats__item--icon\">\n                        <img src={hourglass} alt=\"watch\" />\n                    </li>\n                    <li className=\"game-won__stats__item\">\n                        <span>Best</span>\n                        <br/>\n                        <span>{toHHMMSS(this.stats!.bestTime)}</span>\n                    </li>\n                    <li className=\"game-won__stats__item\">\n                        <span>Worst</span>\n                        <br/>\n                        <span>{toHHMMSS(this.stats!.worstTime)}</span>\n                    </li>\n                </ul>\n                <div className=\"divider\" />\n                <div className=\"game-won__options\">\n                    <Button className=\"game-won__options__item link-button\"\n                        type=\"button\"\n                        text=\"Play Again\"\n                        onClick={this.playAgain}/>\n                    <Link className=\"game-won__options__item link-button\"\n                        to=\"/\">\n                        Main Menu\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n\n    private draw = (delta: number) => {\n        const elapsedTime = 0.0167;\n        this.pieceRenderer!.update(elapsedTime);\n        this.context2D!.fillStyle = \"#333\";\n        this.context2D!.fillRect(0, 0, this.state.dimensions, this.state.dimensions);\n        this.pieceRenderer!.drawPlaceHolder(this.context2D!, 2.5, 2.5);\n        if (this.keepUpdating) {\n            this.setState({\n                rafId: requestAnimationFrame(this.draw),\n            })\n        }\n    } \n}\n"],"sourceRoot":""}