{"version":3,"sources":["components/Button.tsx","logic/Animation.ts","models/GameBoardTypes.ts","util/toHHMMSS.ts","logic/BombFinderPieceRenderer.ts","util/Random.ts","assets/hourglass.svg","pages/game-won.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Button","_ref","type","disabled","className","text","onClick","disabledClass","classes","concat","a","createElement","LoopOptions","AnimationTimer","target","step","loop","arguments","length","undefined","STOP","Object","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","playing","timer","alternated","delta","isComplete","REPEAT","ALTERNATE","setStep","stop","Visibility","d","__webpack_exports__","isVisible","isMarkable","isMarked","CellState","isBomb","v","VISIBLE","VISIBLY_SATISFIED","MARKED","INVISIBLE","cell","visibility","cv","toHHMMSS","time","Math","floor","hours","minutes","seconds","timeString","BombFinderPieceRenderer","settings","min","max","classCallCheck","invisiblePieceCanvas","invisibleMarkedPieceCanvas","staticPieceCanvas","pieceAnimations","pieceLength","gapSize","simpleRender","exampleCellValue","random","defaultCellSize","gridGapSize","setSpinningCubes","spinningCubes","document","height","width","drawInvisiblePiece","getContext","i","ctx","drawVisibleCell","num","value","push","pow","update","ipcContext","impcContext","clearRect","x","y","save","restore","drawImage","hover","drawHover","index","getIndexByCell","overrideColor","beginPath","strokeStyle","drawRectangle","lineWidth","stroke","closePath","s","jump","rotation","drawRotatingSquare","worldX","worldY","cellLength","rotationDirection","radius","totalLength","translate","rotate","getValue","PI","moveTo","lineTo","quadraticCurveTo","alpha","cellValue","arc","innerX","innerY","gradient","createRadialGradient","addColorStop","fillStyle","fill","font","offset","ypos","xpos","textAlign","textBaseline","fillText","String","module","exports","p","GameWon","props","_this","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","keepUpdating","canvas","context2D","game","stats","pieceRenderer","playAgain","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","_ref2","difficulty","bombs","newGame","wrap","_context","prev","next","Games","Create","sent","setState","gameId","id","draw","elapsedTime","state","lastFrame","fillRect","dimentions","drawPlaceHolder","rafId","requestAnimationFrame","loading","winningText","GetById","match","params","Statistics","GetStats","vibration","timestamp","Date","switchGameTimeToOne","worstTime","bestTime","moves","totalMoves","getElementById","logAndDestroy","cancelAnimationFrame","react__WEBPACK_IMPORTED_MODULE_7___default","_components_Loading__WEBPACK_IMPORTED_MODULE_11__","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","_ref3","src","hourglass","alt","_components_Button__WEBPACK_IMPORTED_MODULE_16__","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","Component"],"mappings":"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","file":"static/js/6.fac27dc3.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Button.css\"\n\ninterface Props {\n    type: \"button\" | \"submit\";\n    className?: string;\n    disabled?: boolean;\n    text: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst Button: React.FC<Props> = ({ type, disabled, className, text, onClick }) => {\n    const disabledClass = (disabled) ? \"button disabled\" : \"button\";\n    const classes = (className) ? `${className} ${disabledClass}` : disabledClass;\n    if (onClick) {\n        return <button className={classes}\n            disabled={disabled}\n            type={type}\n            onClick={onClick}>\n            {text}\n        </button>\n    }\n    return <button className={classes} disabled={disabled} type={type}>{text}</button>\n}\n\nexport default Button;","\nexport enum LoopOptions {\n    REPEAT,\n    ALTERNATE,\n    STOP\n}\n\nexport default class AnimationTimer {\n\n    private playing: boolean;\n    private timer = 0;\n    private target: number;\n    private step: number;\n    private loop: LoopOptions;\n    private alternated: boolean;\n\n    constructor(target: number, step: number, loop: LoopOptions = LoopOptions.STOP) {\n        this.timer = 0;\n        this.target = target;\n        this.step = step;\n        this.loop = loop;\n        this.alternated = false;\n        this.playing = true;\n    }\n\n    update(delta: number) {\n        if (!this.isComplete() && this.playing) {\n            this.timer += this.step;\n        } else {\n            if (this.loop === LoopOptions.REPEAT) {\n                this.timer = this.timer % this.target;\n            } else if (this.loop === LoopOptions.ALTERNATE) {\n                this.setStep(this.step * -1);\n                if (!this.alternated) {\n                    this.timer = 0;\n                } else {\n                    this.timer = this.target;\n                }\n            } else if (this.loop === LoopOptions.STOP) {\n                this.timer = this.target;\n                this.stop();\n            }\n        }\n    }\n\n    public stop() {\n        this.playing = false;\n    }\n\n    public play() {\n        this.playing = true;\n    }\n\n    public getValue() {\n        return this.timer;\n    }\n\n    public setTarget(target: number) {\n        this.target = target;\n    }\n\n    public setStep(step: number) {\n        if (step < 0) {\n            this.alternated = true;\n        } else {\n            this.alternated = false;\n        }\n        this.step = step;\n    }\n\n    public isComplete() {\n        return (this.alternated)\n            ? this.timer <= 0\n            : this.timer >= this.target;\n    }\n}","export enum Visibility {\n    INVISIBLE, // show default animation\n    VISIBLE,   // show the cell value\n    VISIBLY_SATISFIED, // show the cell's value in diffrent color\n    MARKED,    // show marked cell\n}\n\nexport const isVisible = (v: Visibility) => \n    v === Visibility.VISIBLE || v === Visibility.VISIBLY_SATISFIED;\n\nexport const isMarkable = (v: Visibility) =>\n    v === Visibility.MARKED || v === Visibility.INVISIBLE;\n\nexport const isMarked = (cell: Cell) => \n    cell.visibility === Visibility.MARKED;\n\nexport enum CellState {\n    BOMB,  // cell is a bomb\n    CLEAN, // cell is clean\n}\n\nexport type CellValue = null | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\nexport const isBomb = (cv?: CellValue) => cv === null || cv === undefined;\n\nexport interface Cell {\n    hover: boolean;\n    visibility: Visibility;\n    readonly state: CellState;\n    readonly value?: CellValue;\n}\n","export default function toHHMMSS(time: number) {\n    time = Math.floor(time);\n    const hours = Math.floor(time / 3600);\n    const minutes = Math.floor((time - (hours * 3600)) / 60);\n    const seconds = time - (hours * 3600) - (minutes * 60);\n    let timeString = \"\";\n\n    if (hours > 0) {\n        timeString += (hours < 10) ? `0${hours}` : `${hours}`;\n    }\n    timeString += (minutes < 10) ? `0${minutes}:` : `${minutes}:`;\n    timeString += (seconds < 10) ? `0${seconds}` : `${seconds}`;\n\n    return timeString;\n}","import AnimationTimer, { LoopOptions } from \"./Animation\";\nimport { Cell, Visibility, isBomb, CellValue } from \"../models/GameBoardTypes\";\nimport RandInRange from \"../util/Random\";\nimport { IPreferences } from \"../models/Preferences\";\n\nexport interface CanvasWindow {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\n/**\n * All the renderer cares about is rendering\n * a piece of the board.\n * \n * When drawing, you will pass in all the cell\n * details and it will be drawn\n */\nexport default class BombFinderPieceRenderer {\n\n    /**\n     * Invisible\n     * Invisible Marked\n     * 0 cell\n     * bomb cell\n     * 1-8 cells\n     * 1-8 cells satisfied\n     */\n    // the offsreen canvas can be this.pieceLength * 20 by this.pieceLength\n    // then when we are drawing we just grab the offset\n    // why not 3 diffrent canvases, animated get there own\n\n    // TODO: Add more off screen canvas updating\n    private invisiblePieceCanvas: HTMLCanvasElement;\n    private invisibleMarkedPieceCanvas: HTMLCanvasElement;\n    private staticPieceCanvas: HTMLCanvasElement[] = [];\n    private pieceAnimations: AnimationTimer[] = [];\n\n    private pieceLength: number;\n    private gapSize: number;\n    private simpleRender: boolean;\n    private exampleCellValue = RandInRange(0, 8);\n\n    constructor(settings: IPreferences) {\n        this.pieceLength = settings.defaultCellSize;\n        this.gapSize = settings.gridGapSize;\n        this.simpleRender = settings.simpleRender;\n        this.setSpinningCubes(settings.spinningCubes);\n        // set up canvas\n        this.invisiblePieceCanvas = document.createElement(\"canvas\");\n        this.invisiblePieceCanvas.height = this.pieceLength + 2;\n        this.invisiblePieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisiblePieceCanvas.getContext('2d')!, 1, 1);\n        this.invisibleMarkedPieceCanvas = document.createElement(\"canvas\");\n        this.invisibleMarkedPieceCanvas.height = this.pieceLength + 2;\n        this.invisibleMarkedPieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisibleMarkedPieceCanvas.getContext('2d')!, 1, 1, \"#3396ff\");\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i] = document.createElement(\"canvas\");\n            this.staticPieceCanvas[i].width = this.pieceLength + 2;\n            this.staticPieceCanvas[i].height = this.pieceLength + 2;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 1, 1.5, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 1, 1.5, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 1, 1.5, 0);\n            } else {\n                this.drawVisibleCell(ctx, 1, 1.5, undefined);\n            }\n        }\n    }\n\n    setCellSize(value: number) {\n        this.pieceLength = value;\n        // hard code invis\n        this.invisiblePieceCanvas.height = value;\n        this.invisiblePieceCanvas.width = value;\n        // marked invis\n        this.invisibleMarkedPieceCanvas.height = value;\n        this.invisibleMarkedPieceCanvas.width = value;\n        // everything else\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i].width = value;\n            this.staticPieceCanvas[i].height = value;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 0, 0, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 0, 0, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 0, 0, 0);\n            } else {\n                this.drawVisibleCell(ctx, 0, 0, undefined);\n            }\n        }\n    }\n\n    setGapSize(value: number) {\n        this.gapSize = value;\n    }\n\n    setSpinningCubes(value: number) {\n        this.pieceAnimations = [];\n        for (let i = value + 1; i >= 1; i--) {\n            this.pieceAnimations.push(\n                new AnimationTimer(90 * i, Math.pow(i + 1, i * .035) - 1, LoopOptions.ALTERNATE));\n        }\n    }\n\n    setSimpleRender(value: boolean) {\n        this.simpleRender = value;\n    }\n\n    update(delta: number) {\n        if (this.simpleRender) {\n            return;\n        }\n        for (let i = 0; i < this.pieceAnimations.length; i++) {\n            this.pieceAnimations[i].update(delta);\n        }\n        // get context\n        const ipcContext = this.invisiblePieceCanvas.getContext('2d')!;\n        const impcContext = this.invisibleMarkedPieceCanvas.getContext('2d')!;\n        // clear canvas\n        ipcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        impcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        // draw canvas\n        this.drawInvisiblePiece(ipcContext, 1, 1);\n        this.drawInvisiblePiece(impcContext, 1, 1, \"#3396ff\");\n    }\n\n    drawPlaceHolder(ctx: CanvasRenderingContext2D, x: number, y: number, visibility: Visibility = Visibility.INVISIBLE) {\n        ctx.save();\n        switch (visibility) {\n            case Visibility.INVISIBLE: this.drawInvisiblePiece(ctx, x, y); break;\n            case Visibility.MARKED: this.drawInvisiblePiece(ctx, x, y, \"#3396ff\"); break;\n            case Visibility.VISIBLE: this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue); break;\n            case Visibility.VISIBLY_SATISFIED:\n                this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue, \"#3396ff\"); break;\n        }\n        ctx.restore();\n    }\n\n    drawPiece(ctx: CanvasRenderingContext2D, cell: Cell, x: number, y: number) {\n        if (cell.visibility === Visibility.INVISIBLE) {\n            ctx.drawImage(this.invisiblePieceCanvas, x, y);\n            if (cell.hover) {\n                this.drawHover(ctx, x + 1, y + 1);\n            }\n        } else if (cell.visibility === Visibility.MARKED) {\n            ctx.drawImage(this.invisibleMarkedPieceCanvas, x, y);\n        } else {\n            const index = this.getIndexByCell(cell);\n            ctx.drawImage(this.staticPieceCanvas[index], x, y);\n        }\n    }\n\n    private getIndexByCell(cell: Cell) {\n        if (isBomb(cell.value)) {\n            return 17;\n        } else if (cell.value === 0) {\n            return 16;\n        } else {\n            if (cell.visibility === Visibility.VISIBLY_SATISFIED) {\n                return cell.value! - 1 + 8;\n            }\n            return cell.value! - 1;\n        }\n    }\n\n    private drawInvisiblePiece(ctx: CanvasRenderingContext2D, x: number, y: number, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"#FFF\";\n        }\n        this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctx.closePath();\n        ctx.restore();\n\n        if (this.simpleRender) {\n            return;\n        }\n\n        ctx.save();\n        let s = this.pieceLength;\n        let jump = 0;\n        for (let i = 1; i < this.pieceAnimations.length; i++) {\n            const rotation = (i % 2 === 0) ? 1 : -1;\n            this.drawRotatingSquare(ctx, jump + x, jump + y, s, i, rotation, overrideColor);\n            jump += (s / 4) / 2;\n            s = (s / 4) * 3;\n        }\n        ctx.restore();\n    }\n\n    private drawRotatingSquare(ctx: CanvasRenderingContext2D, worldX: number, worldY: number, cellLength: number,\n        i: number, rotationDirection: 1 | -1, overrideColor?: string) {\n        const radius = cellLength / 8;\n        let totalLength = cellLength / 2 + (radius * 2);\n        let x = worldX + cellLength / 4 - (radius);\n        let y = worldY + cellLength / 4 - (radius);\n\n        ctx.save();\n        ctx.beginPath();\n        // Draw the rotating bits inside of the circle\n        ctx.translate(x + totalLength / 2, y + totalLength / 2);\n        ctx.rotate(this.pieceAnimations[i].getValue() *  Math.PI / 180);\n        ctx.translate((x + totalLength / 2) * -1, (y + totalLength / 2) * -1);\n        this.drawRectangle(ctx, x, y, radius, totalLength);\n        ctx.lineWidth = 2;\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"gray\";\n        }\n\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    private drawRectangle(ctx: CanvasRenderingContext2D, x: number, y: number, radius: number, length: number) {\n        // start\n        ctx.moveTo(x + radius, y);\n        // top\n        ctx.lineTo(x + length - radius, y);\n        ctx.quadraticCurveTo(x + length, y, x + length, y + radius);\n        // right\n        ctx.lineTo(x + length, y + length - radius);\n        ctx.quadraticCurveTo(x + length, y + length, x + length - radius, y + length);\n        // bottom\n        ctx.lineTo(x + radius, y + length);\n        ctx.quadraticCurveTo(x, y + length, x, y + length - radius);\n        // left\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n    }\n    \n    private drawHover(ctx: CanvasRenderingContext2D, x: number, y: number) {\n        ctx.save()\n        let alpha = 1.0;\n        for (let i = 1; i <= (this.gapSize / 2); i++) {\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(255,255,255, ${alpha})`;\n            this.drawRectangle(ctx, x - i, y - i, (this.pieceLength) / 8,\n                this.pieceLength + (i * 2));\n            if ((i + 1) >= (this.gapSize / 2)) {\n                ctx.lineWidth = 1;\n            } else {\n                ctx.lineWidth = 2;\n            }\n            alpha -= 0.1;\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n\n    private drawVisibleCell(ctx: CanvasRenderingContext2D, x: number, y: number, cellValue?: CellValue, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        let length = this.pieceLength;\n        if (isBomb(cellValue)) {\n            // let radius = 3;\n            // draw the outline of the shape\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#690721\";\n            ctx.lineWidth = 4;\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n            // draw inner circle\n            ctx.save();\n            ctx.beginPath();\n            length -= 6;\n            ctx.arc(x + 3 + length / 2, y + 3 + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#f00f4b\";\n            ctx.lineWidth = 3;\n            // gradient \n\n            const innerX = x + (length / 2);\n            const innerY = y + (length / 2);\n            var gradient = ctx.createRadialGradient(\n                innerX, innerY, this.pieceLength / 6,\n                innerX, innerY, this.pieceLength / 2);\n\n            // Add three color stops\n            gradient.addColorStop(0, '#333');\n            gradient.addColorStop(1, '#690721');\n\n            // fill shap\n            ctx.fillStyle = gradient;\n            ctx.fill();\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n\n        } else if (cellValue === 0) {\n            this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = \"gray\";\n        } else {\n            if (overrideColor) {\n                ctx.fillStyle = overrideColor;\n                ctx.strokeStyle = overrideColor;\n            } else {\n                ctx.fillStyle = \"#FFFFFF\";\n                ctx.strokeStyle = \"#FFFFFF\"\n            }\n            // http://www.ckollars.org/canvas-text-centering.html\n            ctx.font = `normal ${this.pieceLength}px sans-serif`;\n            // const measurements = ctx.measureText(String(cell.value));\n            const offset = (this.pieceLength / 2) + 2;\n            const ypos = y + (this.pieceLength / 2) + offset;// + this.pieceLength;\n            const xpos = x + (this.pieceLength / 2);\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"bottom\";\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.lineWidth = 2;\n            ctx.fillText(String(cellValue), xpos, ypos);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n}","\n\nexport default function RandInRange(min: number, max: number) {\n    return Math.floor(Math.random() * max) + min;\n}","module.exports = __webpack_public_path__ + \"static/media/hourglass.63a5448b.svg\";","import React, { Component } from \"react\";\nimport { Link, RouteComponentProps, Redirect } from \"react-router-dom\";\nimport Games from \"../models/Games\";\nimport Loading from \"../components/Loading\";\nimport \"./game-won.css\";\nimport \"../components/Button.css\"\nimport hourglass from \"../assets/hourglass.svg\";\nimport BombFinderPieceRenderer from \"../logic/BombFinderPieceRenderer\";\nimport Button from \"../components/Button\";\nimport { IPreferences } from \"../models/Preferences\";\nimport toHHMMSS from \"../util/toHHMMSS\";\nimport Statistics from \"../models/Statistics\";\n\ninterface ParamProps {\n    id: string;\n}\n\ntype Props = RouteComponentProps<ParamProps>;\n\ntype State = {\n    loading: boolean,\n    dimentions: number;\n    winningText: string;\n    moves?: number,\n    time?: number,\n    difficulty?: string,\n    gameId?: string,\n    rafId?: number,\n    lastFrame?: number,\n}\n\nexport default class GameWon extends Component<Props, State> {\n\n    private keepUpdating: boolean = true;\n    private canvas?: HTMLCanvasElement;\n    private context2D?: CanvasRenderingContext2D;\n    private game?: Games;\n    private stats?: Statistics;\n    private pieceRenderer?: BombFinderPieceRenderer;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: true,\n            dimentions: 0,\n            winningText: \"\",\n        };\n    }\n\n    async componentDidMount() {\n        // TODO: Handle Error when game doesn't exist\n        this.game = await Games.GetById(this.props.match.params.id);\n        this.stats = await Statistics.GetStats(this.game.difficulty);\n        const settings: IPreferences = {\n            defaultCellSize: 120,\n            gridGapSize: 5,\n            spinningCubes: 7,\n            simpleRender: false,\n            vibration: false,\n            timestamp: new Date(),\n        };\n        let switchGameTimeToOne = false;\n        let winningText = \"You win!\";\n        if (Math.floor(this.game.time) >= this.stats.worstTime) {\n            winningText = \"New Low Score!\";\n            if (Math.floor(this.game.time) === 0) {\n                switchGameTimeToOne = true;\n                this.stats.worstTime = 1;\n            } else {\n                this.stats.worstTime = Math.floor(this.game.time);\n            }\n        }\n        if (Math.floor(this.game.time) <= this.stats.bestTime || this.stats.bestTime === 0) {\n            winningText = \"New High Score!\";\n            if (Math.floor(this.game.time) === 0) {\n                switchGameTimeToOne = true;\n                this.stats.bestTime = 1;\n            } else {\n                this.stats.bestTime = Math.floor(this.game.time);\n            }\n        }\n        if (switchGameTimeToOne) {\n            this.game.time = 1;\n        }\n        this.setState({\n            loading: false,\n            winningText,\n            moves: this.game.totalMoves,\n            time: this.game.time,\n            difficulty: this.game.difficulty,\n            lastFrame: 0,\n            dimentions: settings.defaultCellSize + 1\n        });\n        this.canvas = document.getElementById(\"piece-canvas\") as HTMLCanvasElement;\n        this.context2D = this.canvas.getContext('2d')!;\n        this.pieceRenderer = new BombFinderPieceRenderer(settings);\n        requestAnimationFrame(this.draw);\n    }\n\n    componentWillUnmount() {\n        if (this.game) {\n            this.game.logAndDestroy();\n        }\n        if (this.state.rafId) {\n            cancelAnimationFrame(this.state.rafId!);\n        }\n        this.keepUpdating = false;\n    }\n\n    playAgain = async () => {\n        const { difficulty, width, height, bombs } = this.game!;\n        const newGame = await Games.Create(difficulty, width, height, bombs);\n        this.setState({ gameId: newGame.id });\n    }\n\n    public render() {\n        if (this.state.loading) {\n            return <Loading />\n        }\n        if (this.state.gameId) {\n            return <Redirect to={`/game/${this.state.gameId}`} />\n        }\n        const { difficulty, bombs, width, height } = this.game!;\n        return (\n            <div className=\"game-won\">\n                <canvas id=\"piece-canvas\"\n                    width={this.state.dimentions}\n                    height={this.state.dimentions}>\n                    This Device doesn't support the canvas element!\n                </canvas>\n                <div className=\"game-won--statement\">{this.state.winningText}</div>\n                <div className=\"game-won--statement\">{difficulty} ({width}x{height}:{bombs})</div>\n                <div className=\"divider\" />\n                <ul className=\"game-won__stats\">\n                    <li className=\"game-won__stats__item\">\n                        <span>Moves</span>\n                        <br/>\n                        <span>{this.state.moves}</span>\n                    </li>\n                    <li className=\"game-won__stats__item\">\n                        <span>Score</span>\n                        <br/>\n                        <span>{toHHMMSS(this.state.time!)}</span>\n                    </li>\n                    <li className=\"game-won__stats__item--icon\">\n                        <img src={hourglass} alt=\"watch\" />\n                    </li>\n                    <li className=\"game-won__stats__item\">\n                        <span>Best</span>\n                        <br/>\n                        <span>{toHHMMSS(this.stats!.bestTime)}</span>\n                    </li>\n                    <li className=\"game-won__stats__item\">\n                        <span>Worst</span>\n                        <br/>\n                        <span>{toHHMMSS(this.stats!.worstTime)}</span>\n                    </li>\n                </ul>\n                <div className=\"divider\" />\n                <div className=\"game-won__options\">\n                    <Button className=\"game-won__options__item link-button\"\n                        type=\"button\"\n                        text=\"Play Again\"\n                        onClick={this.playAgain}/>\n                    <Link className=\"game-won__options__item link-button\"\n                        to=\"/\">\n                        Main Menu\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n\n    private draw = (delta: number) => {\n        const elapsedTime = delta - this.state.lastFrame!;\n        this.pieceRenderer!.update(elapsedTime);\n        this.context2D!.fillStyle = \"#333\";\n        this.context2D!.fillRect(0, 0, this.state.dimentions, this.state.dimentions);\n        this.pieceRenderer!.drawPlaceHolder(this.context2D!, 0, 0);\n        if (this.keepUpdating) {\n            this.setState({\n                rafId: requestAnimationFrame(this.draw),\n                lastFrame: delta,\n            })\n        }\n    } \n}\n"],"sourceRoot":""}