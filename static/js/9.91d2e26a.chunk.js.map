{"version":3,"sources":["components/Box.tsx","pages/game-menu.tsx","models/CustomGameConfig.ts","assets/plus.svg"],"names":["Box","_ref","onClick","degree","className","children","classes","concat","clampedMax","style","background","react_default","a","createElement","GameMenu","state","loading","loadOldGame","_callee","id","regenerator_default","wrap","_context","prev","next","_this","unfinishedGames","find","g","abrupt","setState","gameId","gameLocation","stop","prepareGame","_callee2","prepared","game","_context2","Games","Create","name","width","height","bombs","sent","CustomGameConfig","getAll","gameTemplates","GetUnfinishedGames","sort","b","invisiblePieces","this","_this2","react_router","to","_this$state","Loading","react_router_dom","map","i","src_components_Box","key","length","src","plus","alt","Fragment","difficulty","totalMoves","Math","floor","time","Component","DEFAULT_TEMPLATES","Table","Field","tableName","save","config","Object","assign","uuid","createdAt","Date","Query","cfg","remove","templates","filter","t","test","addDefaultTemplateGames","savedDefaultTemplates","item","isDeleted","getById","errors","keys","forEach","temp","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/9.91d2e26a.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Box.css\";\n\ninterface Props {\n    onClick?: () => void;\n    className: string;\n    degree: number;\n}\n\nconst Box: React.FC<Props> = ({onClick, degree, className, children}) => {\n    const classes = `box ${className}`;\n    const clampedDegree = degree % 360;\n    const clampedMax = (degree + 75) % 360; \n    const style = {\n        background: `\n            linear-gradient(135deg,\n            hsl(${clampedDegree}, 51.3%, 46.7%) 0%,\n            hsl(${clampedMax}, 96%, 62.9%) 100%)`\n    };\n    if (!onClick) {\n        return <div style={style}\n            className={classes}>\n            {children}\n        </div>\n    }\n    return <div onClick={onClick}\n        style={style}\n        className={classes}>\n        {children}\n    </div>\n}\n\nexport default Box;","import React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport Games, { IGames } from \"../models/Games\";\nimport Loading from \"../components/Loading\";\nimport Box from \"../components/Box\";\nimport plus from \"../assets/plus.svg\";\nimport CustomGameConfig, { ICustomGameConfig } from \"../models/CustomGameConfig\";\nimport \"./game-menu.css\"\n\ninterface State {\n    loading: boolean;\n    gameId?: string;\n    gameTemplates?: ICustomGameConfig[];\n    gameLocation?: string;\n    unfinishedGames?: IGames[];\n}\n\nexport default class GameMenu extends Component<{}, State> {\n\n    state: Readonly<State> = {\n        loading: true,\n    };\n\n    async componentDidMount() {\n        let gameTemplates = await CustomGameConfig.getAll();\n        let unfinishedGames = await Games.GetUnfinishedGames();\n        unfinishedGames = unfinishedGames.sort((a, b) => (a.invisiblePieces > b.invisiblePieces) ? 1 : -1);\n        this.setState({ loading: false, unfinishedGames, gameTemplates });\n    }\n\n    loadOldGame = async (id: string) => {\n        const game = this.state.unfinishedGames!.find(g => g.id === id);\n        if (!game) {\n            // TODO: log message that game doesn't exist\n            return;\n        }\n        this.setState({ gameId: id, gameLocation: `/game/${id}` });\n    }\n\n    prepareGame = async (prepared: ICustomGameConfig) => {\n        // TODO: Add error handling (add in Games first)\n        let game = await Games.Create(prepared.name!, prepared.width, prepared.height, prepared.bombs);\n        this.setState({ gameId: game.id, gameLocation: `/game/${game.id}` });\n    }\n\n    public render() {\n        if (this.state && this.state.gameId && this.state.gameLocation) {\n            return <Redirect to={this.state.gameLocation} />\n        }\n        const { loading, unfinishedGames, gameTemplates } = this.state;\n        if (loading) {\n            return <Loading />\n        }\n        return (\n            <div className=\"menu\">\n                <h3 className=\"menu__header\">\n                    <span>New Game</span>\n                    <Link to=\"/menu/manage\" className=\"menu__header--link\">Manage Templates</Link>\n                </h3>\n                <div className=\"menu__new\">\n                    {gameTemplates!.map((g, i) => \n                        <Box key={g.name} degree={(i * 25) + 100} className=\"menu__new__item\"\n                            onClick={() => this.prepareGame(g)}>\n                            <h2 className=\"menu--title\">{g.name}</h2>\n                            <p><small><strong>Bombs: </strong>{g.bombs}</small></p>\n                            <p><small><strong>Width: </strong>{g.width}</small></p>\n                            <p><small><strong>Height: </strong>{g.height}</small></p>\n                        </Box>\n                    )}\n                        <Box degree={(gameTemplates!.length * 25) + 100} className=\"menu__new__item\">\n                            <Link to=\"/menu/custom\">\n                                <h2>Custom</h2>\n                                <img src={plus} alt=\"Add custom game\" />\n                            </Link>\n                        </Box>\n                </div>\n                {\n                    (unfinishedGames && unfinishedGames.length !== 0)\n                    ? <React.Fragment>\n                        <h3>Continue Playing</h3>\n                        <div className=\"menu__continue\">\n                            {unfinishedGames!.map(g =>\n                                <Box key={g.id}\n                                    degree={((((g.width * g.height) - g.bombs) - g.invisiblePieces) / (g.width * g.height) - g.bombs) * 360}\n                                    className=\"menu__continue__item\"\n                                    onClick={() => this.loadOldGame(g.id)}>\n                                    <h2 className=\"menu--title\">{g.difficulty}</h2>\n                                    <div className=\"menu__continue__details\">\n                                        <div>\n                                            <p><small><strong>Bombs: </strong>{g.bombs}</small></p>\n                                            <p><small><strong>Width: </strong>{g.width}</small></p>\n                                            <p><small><strong>Height: </strong>{g.height}</small></p>\n                                        </div>\n                                        <div>\n                                            {/* <p><small><strong>Start: </strong>{g.createdAt.toDateString()}</small></p> */}\n                                            <p><small><strong>Pieces Left: </strong>{g.invisiblePieces}</small></p>\n                                            <p><small><strong>Moves: </strong>{g.totalMoves}</small></p>\n                                            <p><small><strong>Time: </strong>{Math.floor(g.time)}s</small></p>\n                                        </div>\n                                    </div>\n                                </Box>\n                            )}\n                        </div>\n                    </React.Fragment>\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\n","import { Table, Field, Query, IDBTable } from \"../logic/MetaDataStorage\";\nimport uuid from \"../util/uuid\";\nimport { FormError } from \"./Types\";\n\nexport interface ICustomGameConfig {\n    id?: string;\n    width: number;\n    height: number;\n    bombs: number;\n    name?: string;\n    save?: boolean;\n    createdAt?: Date;\n}\n\nconst EASY_ID = \"00000000-0000-0000-0000-000000000001\";\nconst MEDIUM_ID = \"00000000-0000-0000-0000-000000000002\";\nconst HARD_ID = \"00000000-0000-0000-0000-000000000003\";\n\nconst DEFAULT_TEMPLATES: ICustomGameConfig[] = [\n    {\n        id: EASY_ID,\n        name: \"easy\",\n        width: 8,\n        height: 8,\n        bombs: 10,\n    },\n    {\n        id: MEDIUM_ID,\n        name: \"medium\",\n        width: 16,\n        height: 16,\n        bombs: 40,\n    },\n    {\n        id: HARD_ID,\n        name: \"hard\",\n        width: 24,\n        height: 24,\n        bombs: 99,\n    }\n];\n\n@Table(\"cgc\")\nexport default class CustomGameConfig implements ICustomGameConfig, IDBTable {\n\n    public tableName = \"cgc\";\n\n    @Field(\"cgc\", true)\n    public id: string = \"\";\n\n    @Field(\"cgc\")\n    public name?: string = undefined;\n\n    @Field(\"cgc\")\n    public width: number = 8;\n\n    @Field(\"cgc\")\n    public height: number = 8;\n\n    @Field(\"cgc\")\n    public bombs: number = 10;\n\n    @Field(\"cgc\")\n    public isDeleted: boolean = false;\n\n    @Field(\"cgc\")\n    public createdAt: Date = new Date();\n\n    public save: boolean = false;\n\n    static async save(config: ICustomGameConfig) {\n        const save = Object.assign(new CustomGameConfig(), config,\n            {id: uuid(), createdAt: new Date()});\n        return await Query.save(save);\n    }\n\n    static async delete(config: ICustomGameConfig) {\n        const cfg = Object.assign(new CustomGameConfig(), config);\n        return await Query.remove(cfg);\n    }\n\n    static async getAll(): Promise<ICustomGameConfig[]> {\n        let templates = await Query.getAll(new CustomGameConfig());\n        // check if the default objects exist\n        // if they don't, add them to the store and templates array\n        const defaultTemplates = templates\n            .filter(t => /^[0]{8}-[0]{4}-[0]{4}-[0]{4}-[0]{11}[1-3]$/.test(t.id));\n        if (defaultTemplates.length === 0) { // there is no default templates inside the tempaltes\n            const savedDefaultTemplates = await this.addDefaultTemplateGames();\n            templates = savedDefaultTemplates;\n        }\n        else {\n            // if they do, filter the templates out IF they are deleted\n            templates = templates.filter(item => !item.isDeleted)\n        }\n        return templates;\n    }\n\n    static async getById(id: string) {\n        // TODO: Error handling\n        return await Query.getById(new CustomGameConfig(), id)!;\n    }\n    \n    static validate(config: ICustomGameConfig) {\n        const errors: FormError<ICustomGameConfig> = {};\n        Object.keys(config).forEach((key) => {\n            switch (key) {\n                case 'width':\n                case 'height':\n                    if (config[key] > 50) {\n                        errors[key] = `${key} is too high!`;\n                    } else if (config[key] < 5) {\n                        errors[key] = `${key} is too low!`;\n                    }\n                    break;\n                case 'bombs':\n                    if (config.bombs > (config.width * config.height) - 1) {\n                        errors.bombs = `Too many bombs! (Max: ${(config.width * config.height) - 1})`;\n                    } else if (config.bombs < 1) {\n                        errors.bombs = \"Too few bombs! (Min: 1)\";\n                    }\n                    break;\n                case 'name':\n                    if (config.save && typeof(config.name) === \"string\" ) {\n                        if (config.name.length > 16) {\n                            errors.name = \"Name is too long!\";\n                        } else if (config.name.length === 0) {\n                            errors.name = \"Name cannot be empty!\";\n                        }\n                    }\n            }\n        });\n        return errors;\n    }\n\n    private static async addDefaultTemplateGames() {\n        const templates = DEFAULT_TEMPLATES.map(temp => \n            Object.assign(new CustomGameConfig(), temp));\n        for (let i = 0; i < templates.length; i++) {\n            await Query.save(templates[i]);\n        }\n        return templates;\n    }\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/plus.bf1cb190.svg\";"],"sourceRoot":""}