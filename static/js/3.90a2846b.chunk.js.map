{"version":3,"sources":["components/Slider.tsx","pages/settings.tsx","components/Button.tsx","logic/Animation.ts","models/GameBoardTypes.ts","logic/BombFinderPieceRenderer.ts","util/Random.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","components/CheckBox.tsx","models/Preferences.ts"],"names":["Slider","_ref","text","name","value","max","min","onChange","maximum","minimum","react_default","a","createElement","className","htmlFor","type","id","Settings","keepUpdating","lastFrame","rafId","canvas","ctx","pieceRenderer","handleChange","event","target","checked","parseInt","isNaN","_this","setCellSize","setGapSize","setSpinningCubes","setSimpleRender","setState","Object","defineProperty","handleSubmit","preventDefault","timestamp","Date","Preferences","Save","state","draw","delta","elapsedTime","size","defaultCellSize","gridGapSize","fillStyle","fillRect","update","forEach","c","i","index","x","y","drawPlaceHolder","requestAnimationFrame","GetPreferences","preferences","this","document","getElementById","getContext","BombFinderPieceRenderer","cancelAnimationFrame","Loading","dimensions","onSubmit","src_components_Slider","spinningCubes","CheckBox","simpleRender","width","height","vibration","Button","toLocaleString","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","disabled","onClick","disabledClass","classes","concat","LoopOptions","AnimationTimer","step","loop","arguments","length","undefined","STOP","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","playing","timer","alternated","isComplete","REPEAT","ALTERNATE","setStep","stop","Visibility","d","__webpack_exports__","isVisible","isMarkable","isMarked","CellState","isBomb","v","VISIBLE","VISIBLY_SATISFIED","MARKED","INVISIBLE","cell","visibility","cv","settings","classCallCheck","invisiblePieceCanvas","invisibleMarkedPieceCanvas","staticPieceCanvas","pieceAnimations","pieceLength","gapSize","exampleCellValue","Math","floor","random","drawInvisiblePiece","drawVisibleCell","num","push","pow","ipcContext","impcContext","clearRect","save","restore","drawImage","hover","drawHover","getIndexByCell","overrideColor","beginPath","strokeStyle","drawRectangle","lineWidth","stroke","closePath","s","jump","rotation","drawRotatingSquare","worldX","worldY","cellLength","rotationDirection","radius","totalLength","translate","rotate","getValue","PI","moveTo","lineTo","quadraticCurveTo","alpha","cellValue","arc","innerX","innerY","gradient","createRadialGradient","addColorStop","fill","font","offset","ypos","xpos","textAlign","textBaseline","fillText","String","_defineProperty","obj","key","enumerable","configurable","writable","Table","Field","tableName","Query","getById","cachedSettings","assign"],"mappings":"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","file":"static/js/3.90a2846b.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Slider.css\"\nimport \"./Input.css\"\n\ninterface Props {\n    text: string;\n    name: string;\n    value: number;\n    max?: number;\n    min?: number;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nconst Slider: React.FC<Props> = ({text, name, value, max, min, onChange}) => {\n    let maximum = (max) ? max : 100;\n    let minimum = (min) ? min : 0;\n    return <div className=\"form-input slider\">\n        <label htmlFor={name}>{text} ({value})</label>\n        <input type=\"range\"\n            id={name}\n            name={name}\n            value={value}\n            max={maximum}\n            min={minimum}\n            onChange={onChange} />\n    </div>\n}\n\nexport default Slider;","import React, { Component } from \"react\";\nimport Preferences, { IPreferences } from \"../models/Preferences\";\nimport CheckBox from \"../components/CheckBox\";\nimport Slider from \"../components/Slider\";\nimport Loading from \"../components/Loading\";\nimport Button from \"../components/Button\";\nimport BombFinderPieceRenderer from \"../logic/BombFinderPieceRenderer\";\nimport \"./settings.css\";\n\nexport default class Settings extends Component<{}, IPreferences> {\n\n    private keepUpdating: boolean = true;\n    private lastFrame: number = 0; \n    private rafId: number = 0;\n    private canvas?: HTMLCanvasElement;\n    private ctx?: CanvasRenderingContext2D;\n    private pieceRenderer?: BombFinderPieceRenderer;\n\n    async componentDidMount() {\n        const preferences = await Preferences.GetPreferences();\n        this.setState(preferences);\n        this.canvas = document.getElementById('preview') as HTMLCanvasElement;\n        this.ctx = this.canvas.getContext('2d')!;\n        this.pieceRenderer = new BombFinderPieceRenderer(preferences);\n        requestAnimationFrame(this.draw);\n    }\n\n    componentWillUnmount() {\n        this.keepUpdating = false;\n        cancelAnimationFrame(this.rafId);\n    }\n\n    handleChange = (event: any) => {\n        const target = event.target;\n        let value;\n        if (target.type === \"checkbox\") {\n            value = target.checked;\n        }\n        else {\n            value = parseInt(target.value, 10);\n            if (isNaN(value)) {\n                value = 0;\n            }\n        }\n        const name = target.name;\n\n        switch(name) {\n            case \"defaultCellSize\": this.pieceRenderer!.setCellSize(value); break;\n            case \"gridGapSize\":     this.pieceRenderer!.setGapSize(value); break;\n            case \"spinningCubes\":   this.pieceRenderer!.setSpinningCubes(value); break;\n            case \"simpleRender\":    this.pieceRenderer!.setSimpleRender(value); break;\n        }\n\n        this.setState({\n            [name]: value\n        } as Pick<Preferences, keyof Preferences>);\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        this.setState({\n            timestamp: new Date()\n        });\n        Preferences.Save(this.state);\n    }\n\n    draw = (delta: number) => {\n        const elapsedTime = delta - this.lastFrame!;\n        // clear board\n        const size = (this.state.defaultCellSize * 2) + this.state.gridGapSize;\n        this.ctx!.fillStyle = \"#333\";\n        this.ctx!.fillRect(0, 0, size, size);\n        // update and draw place holders\n        this.pieceRenderer!.update(elapsedTime);\n        [0, 0, 1, 1].forEach((c, i) => {\n            const index = (i % 2);\n            const x = 1 + (index * this.state.defaultCellSize) + (this.state.gridGapSize * index);\n            const y = 1 + (c * this.state.defaultCellSize) + (this.state.gridGapSize * c);\n            this.pieceRenderer!.drawPlaceHolder(this.ctx!, x, y, i);\n        });\n        if (this.keepUpdating) {\n            this.rafId = requestAnimationFrame(this.draw);\n            this.lastFrame = delta;\n        }\n    }\n\n    public render() {\n        if (!this.state) {\n            return <Loading />;\n        }\n        const dimensions = (this.state.defaultCellSize * 2) + this.state.gridGapSize + 2;\n        return (\n            <div className=\"settings\">\n                <h1>Settings</h1>\n                <form onSubmit={this.handleSubmit}>\n                    {/* <h3>User preferences</h3> */}\n\n                    <Slider text=\"Piece Length\"\n                        name=\"defaultCellSize\"\n                        max={125}\n                        min={25}\n                        value={this.state.defaultCellSize}\n                        onChange={this.handleChange} />\n\n                    <Slider text=\"Piece Gap\"\n                        name=\"gridGapSize\"\n                        max={50}\n                        min={5}\n                        value={this.state.gridGapSize}\n                        onChange={this.handleChange} />\n\n                    <Slider text=\"Spinning Cubes\"\n                        name=\"spinningCubes\"\n                        max={10}\n                        min={0}\n                        value={this.state.spinningCubes}\n                        onChange={this.handleChange} />\n\n                    <CheckBox text=\"Simple Render\"\n                        name=\"simpleRender\"\n                        checked={this.state.simpleRender}\n                        onChange={this.handleChange} />\n\n                    <h3>Grid Preview</h3>\n                    <div className=\"form-input center\">\n                        <canvas id=\"preview\" width={dimensions} height={dimensions}/>\n                    </div>\n\n                    <CheckBox text=\"Viberations\"\n                        name=\"vibration\"\n                        checked={this.state.vibration}\n                        onChange={this.handleChange} />\n                    \n                    <Button type=\"submit\" text=\"Save Changes\"/>\n                </form>\n                <p>\n                    <small>\n                        <strong>Last saved: </strong>\n                        <time>{this.state.timestamp.toLocaleString()}</time>\n                    </small>\n                </p>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport \"./Button.css\"\n\ninterface Props {\n    type: \"button\" | \"submit\";\n    className?: string;\n    disabled?: boolean;\n    text: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst Button: React.FC<Props> = ({ type, disabled, className, text, onClick }) => {\n    const disabledClass = (disabled) ? \"button disabled\" : \"button\";\n    const classes = (className) ? `${className} ${disabledClass}` : disabledClass;\n    if (onClick) {\n        return <button className={classes}\n            disabled={disabled}\n            type={type}\n            onClick={onClick}>\n            {text}\n        </button>\n    }\n    return <button className={classes} disabled={disabled} type={type}>{text}</button>\n}\n\nexport default Button;","\nexport enum LoopOptions {\n    REPEAT,\n    ALTERNATE,\n    STOP\n}\n\nexport default class AnimationTimer {\n\n    private playing: boolean;\n    private timer = 0;\n    private target: number;\n    private step: number;\n    private loop: LoopOptions;\n    private alternated: boolean;\n\n    constructor(target: number, step: number, loop: LoopOptions = LoopOptions.STOP) {\n        this.timer = 0;\n        this.target = target;\n        this.step = step;\n        this.loop = loop;\n        this.alternated = false;\n        this.playing = true;\n    }\n\n    update(delta: number) {\n        if (!this.isComplete() && this.playing) {\n            this.timer += this.step;\n        } else {\n            if (this.loop === LoopOptions.REPEAT) {\n                this.timer = this.timer % this.target;\n            } else if (this.loop === LoopOptions.ALTERNATE) {\n                this.setStep(this.step * -1);\n                if (!this.alternated) {\n                    this.timer = 0;\n                } else {\n                    this.timer = this.target;\n                }\n            } else if (this.loop === LoopOptions.STOP) {\n                this.timer = this.target;\n                this.stop();\n            }\n        }\n    }\n\n    public stop() {\n        this.playing = false;\n    }\n\n    public play() {\n        this.playing = true;\n    }\n\n    public getValue() {\n        return this.timer;\n    }\n\n    public setTarget(target: number) {\n        this.target = target;\n    }\n\n    public setStep(step: number) {\n        if (step < 0) {\n            this.alternated = true;\n        } else {\n            this.alternated = false;\n        }\n        this.step = step;\n    }\n\n    public isComplete() {\n        return (this.alternated)\n            ? this.timer <= 0\n            : this.timer >= this.target;\n    }\n}","export enum Visibility {\n    INVISIBLE, // show default animation\n    VISIBLE,   // show the cell value\n    VISIBLY_SATISFIED, // show the cell's value in diffrent color\n    MARKED,    // show marked cell\n}\n\nexport const isVisible = (v: Visibility) => \n    v === Visibility.VISIBLE || v === Visibility.VISIBLY_SATISFIED;\n\nexport const isMarkable = (v: Visibility) =>\n    v === Visibility.MARKED || v === Visibility.INVISIBLE;\n\nexport const isMarked = (cell: Cell) => \n    cell.visibility === Visibility.MARKED;\n\nexport enum CellState {\n    BOMB,  // cell is a bomb\n    CLEAN, // cell is clean\n}\n\nexport type CellValue = null | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\nexport const isBomb = (cv?: CellValue) => cv === null || cv === undefined;\n\nexport interface Cell {\n    hover: boolean;\n    visibility: Visibility;\n    readonly state: CellState;\n    readonly value?: CellValue;\n}\n","import AnimationTimer, { LoopOptions } from \"./Animation\";\nimport { Cell, Visibility, isBomb, CellValue } from \"../models/GameBoardTypes\";\nimport RandInRange from \"../util/Random\";\nimport { IPreferences } from \"../models/Preferences\";\n\nexport interface CanvasWindow {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\n/**\n * All the renderer cares about is rendering\n * a piece of the board.\n * \n * When drawing, you will pass in all the cell\n * details and it will be drawn\n */\nexport default class BombFinderPieceRenderer {\n\n    /**\n     * Invisible\n     * Invisible Marked\n     * 0 cell\n     * bomb cell\n     * 1-8 cells\n     * 1-8 cells satisfied\n     */\n    // the offsreen canvas can be this.pieceLength * 20 by this.pieceLength\n    // then when we are drawing we just grab the offset\n    // why not 3 diffrent canvases, animated get there own\n\n    // TODO: Add more off screen canvas updating\n    private invisiblePieceCanvas: HTMLCanvasElement;\n    private invisibleMarkedPieceCanvas: HTMLCanvasElement;\n    private staticPieceCanvas: HTMLCanvasElement[] = [];\n    private pieceAnimations: AnimationTimer[] = [];\n\n    private pieceLength: number;\n    private gapSize: number;\n    private simpleRender: boolean;\n    private exampleCellValue = RandInRange(0, 8);\n\n    constructor(settings: IPreferences) {\n        this.pieceLength = settings.defaultCellSize;\n        this.gapSize = settings.gridGapSize;\n        this.simpleRender = settings.simpleRender;\n        this.setSpinningCubes(settings.spinningCubes);\n        // set up canvas\n        this.invisiblePieceCanvas = document.createElement(\"canvas\");\n        this.invisiblePieceCanvas.height = this.pieceLength + 2;\n        this.invisiblePieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisiblePieceCanvas.getContext('2d')!, 1, 1);\n        this.invisibleMarkedPieceCanvas = document.createElement(\"canvas\");\n        this.invisibleMarkedPieceCanvas.height = this.pieceLength + 2;\n        this.invisibleMarkedPieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisibleMarkedPieceCanvas.getContext('2d')!, 1, 1, \"#3396ff\");\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i] = document.createElement(\"canvas\");\n            this.staticPieceCanvas[i].width = this.pieceLength + 2;\n            this.staticPieceCanvas[i].height = this.pieceLength + 2;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 1, 1.5, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 1, 1.5, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 1, 1.5, 0);\n            } else {\n                this.drawVisibleCell(ctx, 1, 1.5, undefined);\n            }\n        }\n    }\n\n    setCellSize(value: number) {\n        this.pieceLength = value;\n        // hard code invis\n        this.invisiblePieceCanvas.height = value;\n        this.invisiblePieceCanvas.width = value;\n        // marked invis\n        this.invisibleMarkedPieceCanvas.height = value;\n        this.invisibleMarkedPieceCanvas.width = value;\n        // everything else\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i].width = value;\n            this.staticPieceCanvas[i].height = value;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 0, 0, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 0, 0, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 0, 0, 0);\n            } else {\n                this.drawVisibleCell(ctx, 0, 0, undefined);\n            }\n        }\n    }\n\n    setGapSize(value: number) {\n        this.gapSize = value;\n    }\n\n    setSpinningCubes(value: number) {\n        this.pieceAnimations = [];\n        for (let i = value + 1; i >= 1; i--) {\n            this.pieceAnimations.push(\n                new AnimationTimer(90 * i, Math.pow(i + 1, i * .035) - 1, LoopOptions.ALTERNATE));\n        }\n    }\n\n    setSimpleRender(value: boolean) {\n        this.simpleRender = value;\n    }\n\n    update(delta: number) {\n        if (this.simpleRender) {\n            return;\n        }\n        for (let i = 0; i < this.pieceAnimations.length; i++) {\n            this.pieceAnimations[i].update(delta);\n        }\n        // get context\n        const ipcContext = this.invisiblePieceCanvas.getContext('2d')!;\n        const impcContext = this.invisibleMarkedPieceCanvas.getContext('2d')!;\n        // clear canvas\n        ipcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        impcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        // draw canvas\n        this.drawInvisiblePiece(ipcContext, 1, 1);\n        this.drawInvisiblePiece(impcContext, 1, 1, \"#3396ff\");\n    }\n\n    drawPlaceHolder(ctx: CanvasRenderingContext2D, x: number, y: number, visibility: Visibility = Visibility.INVISIBLE) {\n        ctx.save();\n        switch (visibility) {\n            case Visibility.INVISIBLE: this.drawInvisiblePiece(ctx, x, y); break;\n            case Visibility.MARKED: this.drawInvisiblePiece(ctx, x, y, \"#3396ff\"); break;\n            case Visibility.VISIBLE: this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue); break;\n            case Visibility.VISIBLY_SATISFIED:\n                this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue, \"#3396ff\"); break;\n        }\n        ctx.restore();\n    }\n\n    drawPiece(ctx: CanvasRenderingContext2D, cell: Cell, x: number, y: number) {\n        if (cell.visibility === Visibility.INVISIBLE) {\n            ctx.drawImage(this.invisiblePieceCanvas, x, y);\n            if (cell.hover) {\n                this.drawHover(ctx, x + 1, y + 1);\n            }\n        } else if (cell.visibility === Visibility.MARKED) {\n            ctx.drawImage(this.invisibleMarkedPieceCanvas, x, y);\n        } else {\n            const index = this.getIndexByCell(cell);\n            ctx.drawImage(this.staticPieceCanvas[index], x, y);\n        }\n    }\n\n    private getIndexByCell(cell: Cell) {\n        if (isBomb(cell.value)) {\n            return 17;\n        } else if (cell.value === 0) {\n            return 16;\n        } else {\n            if (cell.visibility === Visibility.VISIBLY_SATISFIED) {\n                return cell.value! - 1 + 8;\n            }\n            return cell.value! - 1;\n        }\n    }\n\n    private drawInvisiblePiece(ctx: CanvasRenderingContext2D, x: number, y: number, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"#FFF\";\n        }\n        this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctx.closePath();\n        ctx.restore();\n\n        if (this.simpleRender) {\n            return;\n        }\n\n        ctx.save();\n        let s = this.pieceLength;\n        let jump = 0;\n        for (let i = 1; i < this.pieceAnimations.length; i++) {\n            const rotation = (i % 2 === 0) ? 1 : -1;\n            this.drawRotatingSquare(ctx, jump + x, jump + y, s, i, rotation, overrideColor);\n            jump += (s / 4) / 2;\n            s = (s / 4) * 3;\n        }\n        ctx.restore();\n    }\n\n    private drawRotatingSquare(ctx: CanvasRenderingContext2D, worldX: number, worldY: number, cellLength: number,\n        i: number, rotationDirection: 1 | -1, overrideColor?: string) {\n        const radius = cellLength / 8;\n        let totalLength = cellLength / 2 + (radius * 2);\n        let x = worldX + cellLength / 4 - (radius);\n        let y = worldY + cellLength / 4 - (radius);\n\n        ctx.save();\n        ctx.beginPath();\n        // Draw the rotating bits inside of the circle\n        ctx.translate(x + totalLength / 2, y + totalLength / 2);\n        ctx.rotate(this.pieceAnimations[i].getValue() *  Math.PI / 180);\n        ctx.translate((x + totalLength / 2) * -1, (y + totalLength / 2) * -1);\n        this.drawRectangle(ctx, x, y, radius, totalLength);\n        ctx.lineWidth = 2;\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"gray\";\n        }\n\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    private drawRectangle(ctx: CanvasRenderingContext2D, x: number, y: number, radius: number, length: number) {\n        // start\n        ctx.moveTo(x + radius, y);\n        // top\n        ctx.lineTo(x + length - radius, y);\n        ctx.quadraticCurveTo(x + length, y, x + length, y + radius);\n        // right\n        ctx.lineTo(x + length, y + length - radius);\n        ctx.quadraticCurveTo(x + length, y + length, x + length - radius, y + length);\n        // bottom\n        ctx.lineTo(x + radius, y + length);\n        ctx.quadraticCurveTo(x, y + length, x, y + length - radius);\n        // left\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n    }\n    \n    private drawHover(ctx: CanvasRenderingContext2D, x: number, y: number) {\n        ctx.save()\n        let alpha = 1.0;\n        for (let i = 1; i <= (this.gapSize / 2); i++) {\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(255,255,255, ${alpha})`;\n            this.drawRectangle(ctx, x - i, y - i, (this.pieceLength) / 8,\n                this.pieceLength + (i * 2));\n            if ((i + 1) >= (this.gapSize / 2)) {\n                ctx.lineWidth = 1;\n            } else {\n                ctx.lineWidth = 2;\n            }\n            alpha -= 0.1;\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n\n    private drawVisibleCell(ctx: CanvasRenderingContext2D, x: number, y: number, cellValue?: CellValue, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        let length = this.pieceLength;\n        if (isBomb(cellValue)) {\n            // let radius = 3;\n            // draw the outline of the shape\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#690721\";\n            ctx.lineWidth = 4;\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n            // draw inner circle\n            ctx.save();\n            ctx.beginPath();\n            length -= 6;\n            ctx.arc(x + 3 + length / 2, y + 3 + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#f00f4b\";\n            ctx.lineWidth = 3;\n            // gradient \n\n            const innerX = x + (length / 2);\n            const innerY = y + (length / 2);\n            var gradient = ctx.createRadialGradient(\n                innerX, innerY, this.pieceLength / 6,\n                innerX, innerY, this.pieceLength / 2);\n\n            // Add three color stops\n            gradient.addColorStop(0, '#333');\n            gradient.addColorStop(1, '#690721');\n\n            // fill shap\n            ctx.fillStyle = gradient;\n            ctx.fill();\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n\n        } else if (cellValue === 0) {\n            this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = \"gray\";\n        } else {\n            if (overrideColor) {\n                ctx.fillStyle = overrideColor;\n                ctx.strokeStyle = overrideColor;\n            } else {\n                ctx.fillStyle = \"#FFFFFF\";\n                ctx.strokeStyle = \"#FFFFFF\"\n            }\n            // http://www.ckollars.org/canvas-text-centering.html\n            ctx.font = `normal ${this.pieceLength}px sans-serif`;\n            // const measurements = ctx.measureText(String(cell.value));\n            const offset = (this.pieceLength / 2) + 2;\n            const ypos = y + (this.pieceLength / 2) + offset;// + this.pieceLength;\n            const xpos = x + (this.pieceLength / 2);\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"bottom\";\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.lineWidth = 2;\n            ctx.fillText(String(cellValue), xpos, ypos);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n}","\n\nexport default function RandInRange(min: number, max: number) {\n    return Math.floor(Math.random() * max) + min;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import React from 'react';\nimport \"./CheckBox.css\"\n\ninterface Props {\n    text: string;\n    name: string;\n    checked: boolean;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst CheckBox: React.FC<Props> = ({text, name, checked, onChange}) => {\n    return  <label className=\"checkbox\">\n        <input type=\"checkbox\"\n            name={name}\n            checked={checked}\n            onChange={onChange}  />\n            <span>{text}</span>\n    </label>\n}\n\nexport default CheckBox;","import { Table, Field, Query, IDBTable } from \"../logic/MetaDataStorage\";\n\nexport interface IPreferences {\n    // soundVolume: number;\n    // musicVolume: number;\n    defaultCellSize: number; // slider\n    gridGapSize: number;     // slider\n    spinningCubes: number;   // slider\n    simpleRender: boolean;   // checkbox\n    // fullScreen: boolean; // checkbox, don't save\n    vibration: boolean;\n    timestamp: Date;\n}\n\n@Table(\"settings\")\nexport default class Preferences implements IPreferences, IDBTable {\n    \n    public tableName = \"settings\";\n\n    @Field(\"settings\", true)\n    public readonly id: string = \"preferences\";\n\n    @Field(\"settings\")\n    public defaultCellSize: number = 35;\n\n    @Field(\"settings\")\n    public gridGapSize: number = 8.5;\n\n    @Field(\"settings\")\n    public spinningCubes: number = 7;\n\n    @Field(\"settings\")\n    public simpleRender: boolean = false;\n\n    @Field(\"settings\")\n    public vibration: boolean = false;\n    \n    @Field(\"settings\")\n    public timestamp: Date = new Date();\n\n    static async GetPreferences(): Promise<IPreferences> {\n        const preferences = new Preferences();\n        const cachedSettings = await Query.getById(preferences, preferences.id);\n        // not defined\n        if (cachedSettings === undefined) {\n            return preferences;\n        } else {\n            return cachedSettings;\n        }\n    }\n\n    static async Save(preferences: IPreferences) {\n        preferences.timestamp = new Date();\n        const settings = Object.assign(new Preferences(), preferences);\n        return await Query.save(settings);\n    }\n\n}"],"sourceRoot":""}