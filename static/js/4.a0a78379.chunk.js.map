{"version":3,"sources":["components/Slider.tsx","pages/settings.tsx","components/Button.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","logic/Animation.ts","models/GameBoardTypes.ts","util/Random.ts","logic/BombFinderPieceRenderer.ts","components/CheckBox.tsx","models/Preferences.ts"],"names":["Slider","_ref","text","name","value","max","min","onChange","maximum","minimum","react_default","a","createElement","className","htmlFor","type","id","Settings","keepUpdating","lastFrame","rafId","canvas","ctx","pieceRenderer","handleChange","event","target","checked","parseInt","isNaN","_this","setCellSize","setGapSize","setSpinningCubes","setSimpleRender","setState","Object","defineProperty","handleSubmit","preventDefault","timestamp","Date","Preferences","Save","state","draw","delta","elapsedTime","size","defaultCellSize","gridGapSize","fillStyle","fillRect","update","forEach","c","i","index","x","y","drawPlaceHolder","requestAnimationFrame","GetPreferences","preferences","this","document","getElementById","getContext","BombFinderPieceRenderer","cancelAnimationFrame","Loading","dimensions","onSubmit","src_components_Slider","spinningCubes","CheckBox","simpleRender","width","height","firstMoveHandicap","vibration","Button","toLocaleString","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","disabled","onClick","disabledClass","classes","concat","_defineProperty","obj","key","enumerable","configurable","writable","d","__webpack_exports__","LoopOptions","AnimationTimer","step","loop","arguments","length","undefined","STOP","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","playing","timer","alternated","isComplete","REPEAT","ALTERNATE","setStep","stop","Visibility","isVisible","isMarkable","isMarked","CellState","incrementCellValue","decrementCellValue","isBomb","v","VISIBLE","VISIBLY_SATISFIED","MARKED","INVISIBLE","cell","visibility","cv","RandInRange","Math","floor","random","settings","invisiblePieceCanvas","invisibleMarkedPieceCanvas","staticPieceCanvas","pieceAnimations","pieceLength","gapSize","exampleCellValue","drawInvisiblePiece","drawVisibleCell","num","push","pow","ipcContext","impcContext","clearRect","save","restore","drawImage","hover","drawHover","getIndexByCell","overrideColor","beginPath","strokeStyle","drawRectangle","lineWidth","stroke","closePath","s","jump","rotation","drawRotatingSquare","worldX","worldY","cellLength","rotationDirection","radius","totalLength","translate","rotate","getValue","PI","moveTo","lineTo","quadraticCurveTo","alpha","cellValue","arc","innerX","innerY","gradient","createRadialGradient","addColorStop","fill","font","offset","ypos","xpos","textAlign","textBaseline","fillText","String","Table","Field","tableName","Query","getById","cachedSettings","assign"],"mappings":"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","file":"static/js/4.a0a78379.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Slider.css\"\nimport \"./Input.css\"\n\ninterface Props {\n    text: string;\n    name: string;\n    value: number;\n    max?: number;\n    min?: number;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nconst Slider: React.FC<Props> = ({text, name, value, max, min, onChange}) => {\n    let maximum = (max) ? max : 100;\n    let minimum = (min) ? min : 0;\n    return <div className=\"form-input slider\">\n        <label htmlFor={name}>{text} ({value})</label>\n        <input type=\"range\"\n            id={name}\n            name={name}\n            value={value}\n            max={maximum}\n            min={minimum}\n            onChange={onChange} />\n    </div>\n}\n\nexport default Slider;","import React, { Component } from \"react\";\nimport Preferences, { IPreferences } from \"../models/Preferences\";\nimport CheckBox from \"../components/CheckBox\";\nimport Slider from \"../components/Slider\";\nimport Loading from \"../components/Loading\";\nimport Button from \"../components/Button\";\nimport BombFinderPieceRenderer from \"../logic/BombFinderPieceRenderer\";\nimport \"./settings.css\";\n\nexport default class Settings extends Component<{}, IPreferences> {\n\n    private keepUpdating: boolean = true;\n    private lastFrame: number = 0; \n    private rafId: number = 0;\n    private canvas?: HTMLCanvasElement;\n    private ctx?: CanvasRenderingContext2D;\n    private pieceRenderer?: BombFinderPieceRenderer;\n\n    async componentDidMount() {\n        const preferences = await Preferences.GetPreferences();\n        this.setState(preferences);\n        this.canvas = document.getElementById('preview') as HTMLCanvasElement;\n        this.ctx = this.canvas.getContext('2d')!;\n        this.pieceRenderer = new BombFinderPieceRenderer(preferences);\n        requestAnimationFrame(this.draw);\n    }\n\n    componentWillUnmount() {\n        this.keepUpdating = false;\n        cancelAnimationFrame(this.rafId);\n    }\n\n    handleChange = (event: any) => {\n        const target = event.target;\n        let value;\n        if (target.type === \"checkbox\") {\n            value = target.checked;\n        }\n        else {\n            value = parseInt(target.value, 10);\n            if (isNaN(value)) {\n                value = 0;\n            }\n        }\n        const name = target.name;\n\n        switch(name) {\n            case \"defaultCellSize\": this.pieceRenderer!.setCellSize(value); break;\n            case \"gridGapSize\":     this.pieceRenderer!.setGapSize(value); break;\n            case \"spinningCubes\":   this.pieceRenderer!.setSpinningCubes(value); break;\n            case \"simpleRender\":    this.pieceRenderer!.setSimpleRender(value); break;\n        }\n\n        this.setState({\n            [name]: value\n        } as Pick<Preferences, keyof Preferences>);\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        this.setState({\n            timestamp: new Date()\n        });\n        Preferences.Save(this.state);\n    }\n\n    draw = (delta: number) => {\n        const elapsedTime = delta - this.lastFrame!;\n        // clear board\n        const size = (this.state.defaultCellSize * 2) + this.state.gridGapSize;\n        this.ctx!.fillStyle = \"#333\";\n        this.ctx!.fillRect(0, 0, size, size);\n        // update and draw place holders\n        this.pieceRenderer!.update(elapsedTime);\n        [0, 0, 1, 1].forEach((c, i) => {\n            const index = (i % 2);\n            const x = 1 + (index * this.state.defaultCellSize) + (this.state.gridGapSize * index);\n            const y = 1 + (c * this.state.defaultCellSize) + (this.state.gridGapSize * c);\n            this.pieceRenderer!.drawPlaceHolder(this.ctx!, x, y, i);\n        });\n        if (this.keepUpdating) {\n            this.rafId = requestAnimationFrame(this.draw);\n            this.lastFrame = delta;\n        }\n    }\n\n    public render() {\n        if (!this.state) {\n            return <Loading />;\n        }\n        const dimensions = (this.state.defaultCellSize * 2) + this.state.gridGapSize + 2;\n        return (\n            <div className=\"settings\">\n                <h1>Settings</h1>\n                <form onSubmit={this.handleSubmit}>\n                    {/* <h3>User preferences</h3> */}\n\n                    <Slider text=\"Piece Length\"\n                        name=\"defaultCellSize\"\n                        max={125}\n                        min={25}\n                        value={this.state.defaultCellSize}\n                        onChange={this.handleChange} />\n\n                    <Slider text=\"Piece Gap\"\n                        name=\"gridGapSize\"\n                        max={50}\n                        min={5}\n                        value={this.state.gridGapSize}\n                        onChange={this.handleChange} />\n\n                    <Slider text=\"Spinning Cubes\"\n                        name=\"spinningCubes\"\n                        max={10}\n                        min={0}\n                        value={this.state.spinningCubes}\n                        onChange={this.handleChange} />\n\n                    <CheckBox text=\"Simple Render\"\n                        name=\"simpleRender\"\n                        checked={this.state.simpleRender}\n                        onChange={this.handleChange} />\n\n                    <h3>Grid Preview</h3>\n                    <div className=\"form-input center\">\n                        <canvas id=\"preview\" width={dimensions} height={dimensions}/>\n                    </div>\n\n                    <CheckBox text=\"Can't lose on first move\"\n                        name=\"firstMoveHandicap\"\n                        checked={this.state.firstMoveHandicap}\n                        onChange={this.handleChange} />\n\n                    <CheckBox text=\"Viberations\"\n                        name=\"vibration\"\n                        checked={this.state.vibration}\n                        onChange={this.handleChange} />\n                    \n                    <Button type=\"submit\" text=\"Save Changes\"/>\n                </form>\n                <p>\n                    <small>\n                        <strong>Last saved: </strong>\n                        <time>{this.state.timestamp.toLocaleString()}</time>\n                    </small>\n                </p>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport \"./Button.css\"\n\ninterface Props {\n    type: \"button\" | \"submit\";\n    className?: string;\n    disabled?: boolean;\n    text: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst Button: React.FC<Props> = ({ type, disabled, className, text, onClick }) => {\n    const disabledClass = (disabled) ? \"button disabled\" : \"button\";\n    const classes = (className) ? `${className} ${disabledClass}` : disabledClass;\n    if (onClick) {\n        return <button className={classes}\n            disabled={disabled}\n            type={type}\n            onClick={onClick}>\n            {text}\n        </button>\n    }\n    return <button className={classes} disabled={disabled} type={type}>{text}</button>\n}\n\nexport default Button;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","\nexport enum LoopOptions {\n    REPEAT,\n    ALTERNATE,\n    STOP\n}\n\nexport default class AnimationTimer {\n\n    private playing: boolean;\n    private timer = 0;\n    private target: number;\n    private step: number;\n    private loop: LoopOptions;\n    private alternated: boolean;\n\n    constructor(target: number, step: number, loop: LoopOptions = LoopOptions.STOP) {\n        this.timer = 0;\n        this.target = target;\n        this.step = step;\n        this.loop = loop;\n        this.alternated = false;\n        this.playing = true;\n    }\n\n    update(delta: number) {\n        if (!this.isComplete() && this.playing) {\n            this.timer += this.step;\n        } else {\n            if (this.loop === LoopOptions.REPEAT) {\n                this.timer = this.timer % this.target;\n            } else if (this.loop === LoopOptions.ALTERNATE) {\n                this.setStep(this.step * -1);\n                if (!this.alternated) {\n                    this.timer = 0;\n                } else {\n                    this.timer = this.target;\n                }\n            } else if (this.loop === LoopOptions.STOP) {\n                this.timer = this.target;\n                this.stop();\n            }\n        }\n    }\n\n    public stop() {\n        this.playing = false;\n    }\n\n    public play() {\n        this.playing = true;\n    }\n\n    public getValue() {\n        return this.timer;\n    }\n\n    public setTarget(target: number) {\n        this.target = target;\n    }\n\n    public setStep(step: number) {\n        if (step < 0) {\n            this.alternated = true;\n        } else {\n            this.alternated = false;\n        }\n        this.step = step;\n    }\n\n    public isComplete() {\n        return (this.alternated)\n            ? this.timer <= 0\n            : this.timer >= this.target;\n    }\n}","export enum Visibility {\n    INVISIBLE, // show default animation\n    VISIBLE,   // show the cell value\n    VISIBLY_SATISFIED, // show the cell's value in diffrent color\n    MARKED,    // show marked cell\n}\n\nexport const isVisible = (v: Visibility) => \n    v === Visibility.VISIBLE || v === Visibility.VISIBLY_SATISFIED;\n\nexport const isMarkable = (v: Visibility) =>\n    v === Visibility.MARKED || v === Visibility.INVISIBLE;\n\nexport const isMarked = (cell: Cell) => \n    cell.visibility === Visibility.MARKED;\n\nexport enum CellState {\n    BOMB,  // cell is a bomb\n    CLEAN, // cell is clean\n}\n\nexport type CellValue = null | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\nexport const incrementCellValue = (value?: CellValue): CellValue => {\n    switch (value) {\n        case 0: return 1;\n        case 1: return 2;\n        case 2: return 3;\n        case 3: return 4;\n        case 4: return 5;\n        case 5: return 6;\n        case 6: return 7;\n        case 7: return 8;\n        // these last 2 cases should rarely be called\n        case 8: return 8;\n        default: return null\n    }\n}\n\nexport const decrementCellValue = (value?: CellValue): CellValue => {\n    switch (value) {\n        case 1: return 0;\n        case 2: return 1;\n        case 3: return 2;\n        case 4: return 3;\n        case 5: return 4;\n        case 6: return 5;\n        case 7: return 6;\n        case 8: return 7;\n        // these last 2 cases should rarely be called\n        case 0: return 0;\n        default: return null\n    }\n}\n\nexport const isBomb = (cv?: CellValue) => cv === null || cv === undefined;\n\nexport interface Cell {\n    hover: boolean;\n    visibility: Visibility;\n    readonly state: CellState;\n    readonly value?: CellValue;\n}\n","\n\nexport default function RandInRange(min: number, max: number) {\n    return Math.floor(Math.random() * max) + min;\n}","import AnimationTimer, { LoopOptions } from \"./Animation\";\nimport { Cell, Visibility, isBomb, CellValue } from \"../models/GameBoardTypes\";\nimport RandInRange from \"../util/Random\";\nimport { IPreferences } from \"../models/Preferences\";\n\nexport interface CanvasWindow {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\n/**\n * All the renderer cares about is rendering\n * a piece of the board.\n * \n * When drawing, you will pass in all the cell\n * details and it will be drawn\n */\nexport default class BombFinderPieceRenderer {\n\n    /**\n     * Invisible\n     * Invisible Marked\n     * 0 cell\n     * bomb cell\n     * 1-8 cells\n     * 1-8 cells satisfied\n     */\n    // the offsreen canvas can be this.pieceLength * 20 by this.pieceLength\n    // then when we are drawing we just grab the offset\n    // why not 3 diffrent canvases, animated get there own\n\n    // TODO: Add more off screen canvas updating\n    private invisiblePieceCanvas: HTMLCanvasElement;\n    private invisibleMarkedPieceCanvas: HTMLCanvasElement;\n    private staticPieceCanvas: HTMLCanvasElement[] = [];\n    private pieceAnimations: AnimationTimer[] = [];\n\n    private pieceLength: number;\n    private gapSize: number;\n    private simpleRender: boolean;\n    private exampleCellValue = RandInRange(0, 8);\n\n    constructor(settings: IPreferences) {\n        this.pieceLength = settings.defaultCellSize;\n        this.gapSize = settings.gridGapSize;\n        this.simpleRender = settings.simpleRender;\n        this.setSpinningCubes(settings.spinningCubes);\n        // set up canvas\n        this.invisiblePieceCanvas = document.createElement(\"canvas\");\n        this.invisiblePieceCanvas.height = this.pieceLength + 2;\n        this.invisiblePieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisiblePieceCanvas.getContext('2d')!, 1, 1);\n        this.invisibleMarkedPieceCanvas = document.createElement(\"canvas\");\n        this.invisibleMarkedPieceCanvas.height = this.pieceLength + 2;\n        this.invisibleMarkedPieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisibleMarkedPieceCanvas.getContext('2d')!, 1, 1, \"#3396ff\");\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i] = document.createElement(\"canvas\");\n            this.staticPieceCanvas[i].width = this.pieceLength + 2;\n            this.staticPieceCanvas[i].height = this.pieceLength + 2;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 1, 1.5, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 1, 1.5, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 1, 1.5, 0);\n            } else {\n                this.drawVisibleCell(ctx, 1, 1.5, undefined);\n            }\n        }\n    }\n\n    setCellSize(value: number) {\n        this.pieceLength = value;\n        // hard code invis\n        this.invisiblePieceCanvas.height = value;\n        this.invisiblePieceCanvas.width = value;\n        // marked invis\n        this.invisibleMarkedPieceCanvas.height = value;\n        this.invisibleMarkedPieceCanvas.width = value;\n        // everything else\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i].width = value;\n            this.staticPieceCanvas[i].height = value;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 0, 0, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 0, 0, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 0, 0, 0);\n            } else {\n                this.drawVisibleCell(ctx, 0, 0, undefined);\n            }\n        }\n    }\n\n    setGapSize(value: number) {\n        this.gapSize = value;\n    }\n\n    setSpinningCubes(value: number) {\n        this.pieceAnimations = [];\n        for (let i = value + 1; i >= 1; i--) {\n            this.pieceAnimations.push(\n                new AnimationTimer(90 * i, Math.pow(i + 1, i * .035) - 1, LoopOptions.ALTERNATE));\n        }\n    }\n\n    setSimpleRender(value: boolean) {\n        this.simpleRender = value;\n    }\n\n    update(delta: number) {\n        if (this.simpleRender) {\n            return;\n        }\n        for (let i = 0; i < this.pieceAnimations.length; i++) {\n            this.pieceAnimations[i].update(delta);\n        }\n        // get context\n        const ipcContext = this.invisiblePieceCanvas.getContext('2d')!;\n        const impcContext = this.invisibleMarkedPieceCanvas.getContext('2d')!;\n        // clear canvas\n        ipcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        impcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        // draw canvas\n        this.drawInvisiblePiece(ipcContext, 1, 1);\n        this.drawInvisiblePiece(impcContext, 1, 1, \"#3396ff\");\n    }\n\n    drawPlaceHolder(ctx: CanvasRenderingContext2D, x: number, y: number, visibility: Visibility = Visibility.INVISIBLE) {\n        ctx.save();\n        switch (visibility) {\n            case Visibility.INVISIBLE: this.drawInvisiblePiece(ctx, x, y); break;\n            case Visibility.MARKED: this.drawInvisiblePiece(ctx, x, y, \"#3396ff\"); break;\n            case Visibility.VISIBLE: this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue); break;\n            case Visibility.VISIBLY_SATISFIED:\n                this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue, \"#3396ff\"); break;\n        }\n        ctx.restore();\n    }\n\n    drawPiece(ctx: CanvasRenderingContext2D, cell: Cell, x: number, y: number) {\n        if (cell.visibility === Visibility.INVISIBLE) {\n            ctx.drawImage(this.invisiblePieceCanvas, x, y);\n            if (cell.hover) {\n                this.drawHover(ctx, x + 1, y + 1);\n                // add this as a debug feature cause its actually cool\n                // const index = this.getIndexByCell(cell);\n                // ctx.drawImage(this.staticPieceCanvas[index], x, y);\n            }\n        } else if (cell.visibility === Visibility.MARKED) {\n            ctx.drawImage(this.invisibleMarkedPieceCanvas, x, y);\n        } else {\n            const index = this.getIndexByCell(cell);\n            ctx.drawImage(this.staticPieceCanvas[index], x, y);\n        }\n    }\n\n    private getIndexByCell(cell: Cell) {\n        if (isBomb(cell.value)) {\n            return 17;\n        } else if (cell.value === 0) {\n            return 16;\n        } else {\n            if (cell.visibility === Visibility.VISIBLY_SATISFIED) {\n                return cell.value! - 1 + 8;\n            }\n            return cell.value! - 1;\n        }\n    }\n\n    private drawInvisiblePiece(ctx: CanvasRenderingContext2D, x: number, y: number, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"#FFF\";\n        }\n        this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctx.closePath();\n        ctx.restore();\n\n        if (this.simpleRender) {\n            return;\n        }\n\n        ctx.save();\n        let s = this.pieceLength;\n        let jump = 0;\n        for (let i = 1; i < this.pieceAnimations.length; i++) {\n            const rotation = (i % 2 === 0) ? 1 : -1;\n            this.drawRotatingSquare(ctx, jump + x, jump + y, s, i, rotation, overrideColor);\n            jump += (s / 4) / 2;\n            s = (s / 4) * 3;\n        }\n        ctx.restore();\n    }\n\n    private drawRotatingSquare(ctx: CanvasRenderingContext2D, worldX: number, worldY: number, cellLength: number,\n        i: number, rotationDirection: 1 | -1, overrideColor?: string) {\n        const radius = cellLength / 8;\n        let totalLength = cellLength / 2 + (radius * 2);\n        let x = worldX + cellLength / 4 - (radius);\n        let y = worldY + cellLength / 4 - (radius);\n\n        ctx.save();\n        ctx.beginPath();\n        // Draw the rotating bits inside of the circle\n        ctx.translate(x + totalLength / 2, y + totalLength / 2);\n        ctx.rotate(this.pieceAnimations[i].getValue() *  Math.PI / 180);\n        ctx.translate((x + totalLength / 2) * -1, (y + totalLength / 2) * -1);\n        this.drawRectangle(ctx, x, y, radius, totalLength);\n        ctx.lineWidth = 2;\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"gray\";\n        }\n\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    private drawRectangle(ctx: CanvasRenderingContext2D, x: number, y: number, radius: number, length: number) {\n        // start\n        ctx.moveTo(x + radius, y);\n        // top\n        ctx.lineTo(x + length - radius, y);\n        ctx.quadraticCurveTo(x + length, y, x + length, y + radius);\n        // right\n        ctx.lineTo(x + length, y + length - radius);\n        ctx.quadraticCurveTo(x + length, y + length, x + length - radius, y + length);\n        // bottom\n        ctx.lineTo(x + radius, y + length);\n        ctx.quadraticCurveTo(x, y + length, x, y + length - radius);\n        // left\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n    }\n    \n    private drawHover(ctx: CanvasRenderingContext2D, x: number, y: number) {\n        ctx.save()\n        let alpha = 1.0;\n        for (let i = 1; i <= (this.gapSize / 2); i++) {\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(255,255,255, ${alpha})`;\n            this.drawRectangle(ctx, x - i, y - i, (this.pieceLength) / 8,\n                this.pieceLength + (i * 2));\n            if ((i + 1) >= (this.gapSize / 2)) {\n                ctx.lineWidth = 1;\n            } else {\n                ctx.lineWidth = 2;\n            }\n            alpha -= 0.1;\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n\n    private drawVisibleCell(ctx: CanvasRenderingContext2D, x: number, y: number, cellValue?: CellValue, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        let length = this.pieceLength;\n        if (isBomb(cellValue)) {\n            // let radius = 3;\n            // draw the outline of the shape\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#690721\";\n            ctx.lineWidth = 4;\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n            // draw inner circle\n            ctx.save();\n            ctx.beginPath();\n            length -= 6;\n            ctx.arc(x + 3 + length / 2, y + 3 + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#f00f4b\";\n            ctx.lineWidth = 3;\n            // gradient \n\n            const innerX = x + (length / 2);\n            const innerY = y + (length / 2);\n            var gradient = ctx.createRadialGradient(\n                innerX, innerY, this.pieceLength / 6,\n                innerX, innerY, this.pieceLength / 2);\n\n            // Add three color stops\n            gradient.addColorStop(0, '#333');\n            gradient.addColorStop(1, '#690721');\n\n            // fill shap\n            ctx.fillStyle = gradient;\n            ctx.fill();\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n\n        } else if (cellValue === 0) {\n            this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = \"gray\";\n        } else {\n            if (overrideColor) {\n                ctx.fillStyle = overrideColor;\n                ctx.strokeStyle = overrideColor;\n            } else {\n                ctx.fillStyle = \"#FFFFFF\";\n                ctx.strokeStyle = \"#FFFFFF\"\n            }\n            // http://www.ckollars.org/canvas-text-centering.html\n            ctx.font = `normal ${this.pieceLength}px sans-serif`;\n            // const measurements = ctx.measureText(String(cell.value));\n            const offset = (this.pieceLength / 2) + 2;\n            const ypos = y + (this.pieceLength / 2) + offset;// + this.pieceLength;\n            const xpos = x + (this.pieceLength / 2);\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"bottom\";\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.lineWidth = 2;\n            ctx.fillText(String(cellValue), xpos, ypos);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n}","import React from 'react';\nimport \"./CheckBox.css\"\n\ninterface Props {\n    text: string;\n    name: string;\n    checked: boolean;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst CheckBox: React.FC<Props> = ({text, name, checked, onChange}) => {\n    return  <label className=\"checkbox\">\n        <input type=\"checkbox\"\n            name={name}\n            checked={checked}\n            onChange={onChange}  />\n            <span>{text}</span>\n    </label>\n}\n\nexport default CheckBox;","import { Table, Field, Query, IDBTable } from \"../logic/MetaDataStorage\";\n\nexport interface IPreferences {\n    // soundVolume: number;\n    // musicVolume: number;\n    defaultCellSize: number; // slider\n    gridGapSize: number;     // slider\n    spinningCubes: number;   // slider\n    simpleRender: boolean;   // checkbox\n    // fullScreen: boolean; // checkbox, don't save\n    firstMoveHandicap: boolean;\n    vibration: boolean;\n    timestamp: Date;\n}\n\n@Table(\"settings\")\nexport default class Preferences implements IPreferences, IDBTable {\n    \n    public tableName = \"settings\";\n\n    @Field(\"settings\", true)\n    public readonly id: string = \"preferences\";\n\n    @Field(\"settings\")\n    public defaultCellSize: number = 35;\n\n    @Field(\"settings\")\n    public gridGapSize: number = 8.5;\n\n    @Field(\"settings\")\n    public spinningCubes: number = 7;\n\n    @Field(\"settings\")\n    public simpleRender: boolean = false;\n\n    @Field(\"settings\")\n    public firstMoveHandicap: boolean = true;\n\n    @Field(\"settings\")\n    public vibration: boolean = false;\n    \n    @Field(\"settings\")\n    public timestamp: Date = new Date();\n\n    static async GetPreferences(): Promise<IPreferences> {\n        const preferences = new Preferences();\n        const cachedSettings = await Query.getById(preferences, preferences.id);\n        // not defined\n        if (cachedSettings === undefined) {\n            return preferences;\n        } else {\n            return cachedSettings;\n        }\n    }\n\n    static async Save(preferences: IPreferences) {\n        preferences.timestamp = new Date();\n        const settings = Object.assign(new Preferences(), preferences);\n        return await Query.save(settings);\n    }\n\n}"],"sourceRoot":""}