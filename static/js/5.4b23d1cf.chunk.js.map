{"version":3,"sources":["components/Input.tsx","util/isObjectEmpty.ts","pages/custom-game.tsx","components/Button.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","models/CustomGameConfig.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread.js","components/CheckBox.tsx"],"names":["Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","focus","setState","blur","value","onBlur","state","_this$props","type","name","text","error","onChange","label","className","concat","validValue","react_default","a","createElement","htmlFor","id","onFocus","autoComplete","required","React","Component","isObjectEmpty","obj","key","getOwnPropertyNames","includes","CustomGameForm","handleChange","event","target","checked","parseInt","defineProperty","validate","errors","CustomGameConfig","handleSubmit","_callee","_this$state","width","height","bombs","game","regenerator_default","wrap","_context","prev","next","preventDefault","abrupt","save","Games","Create","sent","gameId","stop","c","assign","undefined","objectSpread","react_router","to","onSubmit","Input_Input","CheckBox","Button","disabled","Loading","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_ref","onClick","disabledClass","classes","_defineProperty","enumerable","configurable","writable","d","__webpack_exports__","DEFAULT_TEMPLATES","Table","Field","tableName","config","uuid","createdAt","Date","Query","cfg","remove","getAll","templates","filter","t","test","length","addDefaultTemplateGames","savedDefaultTemplates","item","isDeleted","getById","keys","forEach","map","temp","i","_objectSpread","_defineProperty__WEBPACK_IMPORTED_MODULE_0__","arguments","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor"],"mappings":"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","file":"static/js/5.4b23d1cf.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Input.css\"\n\ninterface State {\n    focus: boolean;\n}\n\ninterface Props {\n    type: \"text\" | \"number\";\n    name: string;\n    text?: string;\n    value?: string | number;\n    error?: string;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void\n    onBlur?: () => void;\n}\n\n/**\n * Taken from:\n * https://codepen.io/rikschennink/pen/FHaLo\n */\nexport default class Input extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            focus: (props.value) ? true : false,\n        }\n    }\n\n    focus = () => {\n        this.setState({ focus: true });\n    }\n\n    blur = () => {\n        if (!this.props.value) {\n            this.setState({ focus: false });\n        }\n        if (this.props.onBlur) {\n            this.props.onBlur();\n        }\n    }\n\n    render() {\n        const { type, name, text, value, error, onChange } = this.props;\n        const { focus } = this.state;\n        const label = (text) ? text : name;\n        const className = `form-input ${(focus) ? \"focus\" : \"\"}`;\n        const validValue = (value) ? value : \"\";\n        return <div className={className}>\n            <label htmlFor={name}>{label}</label>\n            <input type={type}\n                id={name}\n                name={name}\n                value={validValue}\n                onChange={onChange}\n                onFocus={this.focus}\n                onBlur={this.blur}\n                autoComplete=\"off\"\n                required/>\n            {\n                (error)\n                ? <span className=\"error\">{error}</span>\n                : null\n            }\n        </div>\n    }\n}\n","\nexport function isObjectEmpty(obj: object) {\n    if (obj === null) {\n        return true;\n    }\n    for (let key in obj) {\n        if (Object.getOwnPropertyNames(obj).includes(key)) {\n            return false;\n        }\n    }\n    return true;\n}","import React from \"react\";\nimport Input from \"../components/Input\";\nimport \"./custom-game.css\";\nimport CheckBox from \"../components/CheckBox\";\nimport Button from \"../components/Button\";\nimport { Redirect } from \"react-router\";\nimport Games from \"../models/Games\";\nimport CustomGameConfig, { ICustomGameConfig } from \"../models/CustomGameConfig\";\nimport Loading from \"../components/Loading\";\nimport { FormError } from \"../models/Types\";\nimport { isObjectEmpty } from \"../util/isObjectEmpty\";\n\ninterface State extends ICustomGameConfig {\n    save: boolean;\n    gameId?: string;\n    errors: FormError<ICustomGameConfig>;\n}\n\nexport default class CustomGameForm extends React.Component<{}, State> {\n\n    componentDidMount() {\n        const c = Object.assign({},\n            new CustomGameConfig(),\n            {gameId: undefined, errors: {}}\n        );\n        this.setState({...c});\n    }\n\n    handleChange = (event: any) => {\n        const target = event.target;\n        let value;\n        if (target.type === \"checkbox\") {\n            value = target.checked;\n        }\n        else if (target.type === \"text\") {\n            value = target.value;\n        }\n        else {\n            value = parseInt(target.value, 10);\n        }\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n        } as Pick<State, keyof State>, this.validate);\n    }\n\n    validate = () => {\n        const errors = CustomGameConfig.validate(this.state);\n        this.setState({errors});\n    }\n\n    handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const errors = CustomGameConfig.validate(this.state);\n        if (!isObjectEmpty(errors)) {\n            this.setState({errors});\n            return;\n        }\n        if (this.state.save) {\n            await CustomGameConfig.save(this.state);\n        }\n        let { width, height, bombs, name } = this.state;\n        if (!name) {\n            name = `custom (${width}x${height}:${bombs})`;\n        }\n        // TODO: Add error handling (add in Games first)\n        const game = await Games.Create(name, width, height, bombs);\n        this.setState({ gameId: game.id });\n    }\n\n    render() {\n        if (!this.state) {\n            return <Loading />;\n        }\n        if (this.state.gameId) {\n            return <Redirect to={`/game/${this.state.gameId}`} />\n        }\n        return (\n            <div className=\"custom\">\n                <h3>Create New Game</h3>\n                <form className=\"custom__form\" onSubmit={this.handleSubmit}>\n                    <div className=\"custom__form--inline\">\n                        <Input type=\"number\"\n                            name=\"width\"\n                            error={this.state.errors.width}\n                            value={this.state.width}\n                            onBlur={this.validate}\n                            onChange={this.handleChange} />\n                        <Input type=\"number\"\n                            name=\"height\"\n                            error={this.state.errors.height}\n                            value={this.state.height}\n                            onBlur={this.validate}\n                            onChange={this.handleChange} />\n                    </div>\n                    <Input type=\"number\"\n                        name=\"bombs\"\n                        error={this.state.errors.bombs}\n                        value={this.state.bombs}\n                        onBlur={this.validate}\n                        onChange={this.handleChange} />\n                    <CheckBox text=\"Save Game Configuration\"\n                        name=\"save\"\n                        checked={this.state.save}\n                        onChange={this.handleChange} />\n                    {(!this.state.save)\n                        ? null\n                        : <Input type=\"text\"\n                            name=\"name\"\n                            error={this.state.errors.name}\n                            value={this.state.name}\n                            onBlur={this.validate}\n                            onChange={this.handleChange} />\n                    }\n                    <Button type=\"submit\"\n                        disabled={!isObjectEmpty(this.state.errors)}\n                        text=\"Start Game\" />\n                </form>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport \"./Button.css\"\n\ninterface Props {\n    type: \"button\" | \"submit\";\n    className?: string;\n    disabled?: boolean;\n    text: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst Button: React.FC<Props> = ({ type, disabled, className, text, onClick }) => {\n    const disabledClass = (disabled) ? \"button disabled\" : \"button\";\n    const classes = (className) ? `${className} ${disabledClass}` : disabledClass;\n    if (onClick) {\n        return <button className={classes}\n            disabled={disabled}\n            type={type}\n            onClick={onClick}>\n            {text}\n        </button>\n    }\n    return <button className={classes} disabled={disabled} type={type}>{text}</button>\n}\n\nexport default Button;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import { Table, Field, Query, IDBTable } from \"../logic/MetaDataStorage\";\nimport uuid from \"../util/uuid\";\nimport { FormError } from \"./Types\";\n\nexport interface ICustomGameConfig {\n    id?: string;\n    width: number;\n    height: number;\n    bombs: number;\n    name?: string;\n    save?: boolean;\n    createdAt?: Date;\n}\n\nconst EASY_ID = \"00000000-0000-0000-0000-000000000001\";\nconst MEDIUM_ID = \"00000000-0000-0000-0000-000000000002\";\nconst HARD_ID = \"00000000-0000-0000-0000-000000000003\";\n\nconst DEFAULT_TEMPLATES: ICustomGameConfig[] = [\n    {\n        id: EASY_ID,\n        name: \"easy\",\n        width: 8,\n        height: 8,\n        bombs: 10,\n    },\n    {\n        id: MEDIUM_ID,\n        name: \"medium\",\n        width: 16,\n        height: 16,\n        bombs: 40,\n    },\n    {\n        id: HARD_ID,\n        name: \"hard\",\n        width: 24,\n        height: 24,\n        bombs: 99,\n    }\n];\n\n@Table(\"cgc\")\nexport default class CustomGameConfig implements ICustomGameConfig, IDBTable {\n\n    public tableName = \"cgc\";\n\n    @Field(\"cgc\", true)\n    public id: string = \"\";\n\n    @Field(\"cgc\")\n    public name?: string = undefined;\n\n    @Field(\"cgc\")\n    public width: number = 8;\n\n    @Field(\"cgc\")\n    public height: number = 8;\n\n    @Field(\"cgc\")\n    public bombs: number = 10;\n\n    @Field(\"cgc\")\n    public isDeleted: boolean = false;\n\n    @Field(\"cgc\")\n    public createdAt: Date = new Date();\n\n    public save: boolean = false;\n\n    static async save(config: ICustomGameConfig) {\n        const save = Object.assign(new CustomGameConfig(), config,\n            {id: uuid(), createdAt: new Date()});\n        return await Query.save(save);\n    }\n\n    static async delete(config: ICustomGameConfig) {\n        const cfg = Object.assign(new CustomGameConfig(), config);\n        return await Query.remove(cfg);\n    }\n\n    static async getAll(): Promise<ICustomGameConfig[]> {\n        let templates = await Query.getAll(new CustomGameConfig());\n        // check if the default objects exist\n        // if they don't, add them to the store and templates array\n        const defaultTemplates = templates\n            .filter(t => /^[0]{8}-[0]{4}-[0]{4}-[0]{4}-[0]{11}[1-3]$/.test(t.id));\n        if (defaultTemplates.length === 0) { // there is no default templates inside the tempaltes\n            const savedDefaultTemplates = await this.addDefaultTemplateGames();\n            templates = savedDefaultTemplates;\n        }\n        else {\n            // if they do, filter the templates out IF they are deleted\n            templates = templates.filter(item => !item.isDeleted)\n        }\n        return templates;\n    }\n\n    static async getById(id: string) {\n        // TODO: Error handling\n        return await Query.getById(new CustomGameConfig(), id)!;\n    }\n    \n    static validate(config: ICustomGameConfig) {\n        const errors: FormError<ICustomGameConfig> = {};\n        Object.keys(config).forEach((key) => {\n            switch (key) {\n                case 'width':\n                case 'height':\n                    if (config[key] > 50) {\n                        errors[key] = `${key} is too high!`;\n                    } else if (config[key] < 5) {\n                        errors[key] = `${key} is too low!`;\n                    }\n                    break;\n                case 'bombs':\n                    if (config.bombs > (config.width * config.height) - 1) {\n                        errors.bombs = `Too many bombs! (Max: ${(config.width * config.height) - 1})`;\n                    } else if (config.bombs < 1) {\n                        errors.bombs = \"Too few bombs! (Min: 1)\";\n                    }\n                    break;\n                case 'name':\n                    if (config.save && typeof(config.name) === \"string\" ) {\n                        if (config.name.length > 16) {\n                            errors.name = \"Name is too long!\";\n                        } else if (config.name.length === 0) {\n                            errors.name = \"Name cannot be empty!\";\n                        }\n                    }\n            }\n        });\n        return errors;\n    }\n\n    private static async addDefaultTemplateGames() {\n        const templates = DEFAULT_TEMPLATES.map(temp => \n            Object.assign(new CustomGameConfig(), temp));\n        for (let i = 0; i < templates.length; i++) {\n            await Query.save(templates[i]);\n        }\n        return templates;\n    }\n}\n\n","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import React from 'react';\nimport \"./CheckBox.css\"\n\ninterface Props {\n    text: string;\n    name: string;\n    checked: boolean;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst CheckBox: React.FC<Props> = ({text, name, checked, onChange}) => {\n    return  <label className=\"checkbox\">\n        <input type=\"checkbox\"\n            name={name}\n            checked={checked}\n            onChange={onChange}  />\n            <span>{text}</span>\n    </label>\n}\n\nexport default CheckBox;"],"sourceRoot":""}