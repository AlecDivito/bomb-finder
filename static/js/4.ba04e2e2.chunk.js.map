{"version":3,"sources":["components/Slider.tsx","pages/settings.tsx","components/Button.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","logic/Animation.ts","models/GameBoardTypes.ts","util/Random.ts","logic/BombFinderPieceRenderer.ts","components/CheckBox.tsx","models/Preferences.ts"],"names":["Slider","_ref","text","name","value","max","min","onChange","maximum","minimum","react_default","a","createElement","className","htmlFor","type","id","Settings","keepUpdating","lastFrame","rafId","canvas","ctx","pieceRenderer","handleChange","event","target","checked","parseInt","isNaN","_this","setCellSize","setGapSize","setSpinningCubes","setSimpleRender","setState","Object","defineProperty","handleSubmit","preventDefault","timestamp","Date","Preferences","Save","state","draw","delta","elapsedTime","size","defaultCellSize","gridGapSize","fillStyle","fillRect","update","forEach","c","i","index","x","y","drawPlaceHolder","requestAnimationFrame","GetPreferences","preferences","this","document","getElementById","getContext","BombFinderPieceRenderer","cancelAnimationFrame","Loading","dimensions","onSubmit","src_components_Slider","spinningCubes","CheckBox","simpleRender","width","height","vibration","Button","toLocaleString","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","disabled","onClick","disabledClass","classes","concat","_defineProperty","obj","key","enumerable","configurable","writable","d","__webpack_exports__","LoopOptions","AnimationTimer","step","loop","arguments","length","undefined","STOP","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","playing","timer","alternated","isComplete","REPEAT","ALTERNATE","setStep","stop","Visibility","isVisible","isMarkable","isMarked","CellState","incrementCellValue","isBomb","v","VISIBLE","VISIBLY_SATISFIED","MARKED","INVISIBLE","cell","visibility","cv","RandInRange","Math","floor","random","settings","invisiblePieceCanvas","invisibleMarkedPieceCanvas","staticPieceCanvas","pieceAnimations","pieceLength","gapSize","exampleCellValue","drawInvisiblePiece","drawVisibleCell","num","push","pow","ipcContext","impcContext","clearRect","save","restore","drawImage","hover","drawHover","getIndexByCell","overrideColor","beginPath","strokeStyle","drawRectangle","lineWidth","stroke","closePath","s","jump","rotation","drawRotatingSquare","worldX","worldY","cellLength","rotationDirection","radius","totalLength","translate","rotate","getValue","PI","moveTo","lineTo","quadraticCurveTo","alpha","cellValue","arc","innerX","innerY","gradient","createRadialGradient","addColorStop","fill","font","offset","ypos","xpos","textAlign","textBaseline","fillText","String","Table","Field","tableName","Query","getById","cachedSettings","assign"],"mappings":"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","file":"static/js/4.ba04e2e2.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Slider.css\"\nimport \"./Input.css\"\n\ninterface Props {\n    text: string;\n    name: string;\n    value: number;\n    max?: number;\n    min?: number;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nconst Slider: React.FC<Props> = ({text, name, value, max, min, onChange}) => {\n    let maximum = (max) ? max : 100;\n    let minimum = (min) ? min : 0;\n    return <div className=\"form-input slider\">\n        <label htmlFor={name}>{text} ({value})</label>\n        <input type=\"range\"\n            id={name}\n            name={name}\n            value={value}\n            max={maximum}\n            min={minimum}\n            onChange={onChange} />\n    </div>\n}\n\nexport default Slider;","import React, { Component } from \"react\";\nimport Preferences, { IPreferences } from \"../models/Preferences\";\nimport CheckBox from \"../components/CheckBox\";\nimport Slider from \"../components/Slider\";\nimport Loading from \"../components/Loading\";\nimport Button from \"../components/Button\";\nimport BombFinderPieceRenderer from \"../logic/BombFinderPieceRenderer\";\nimport \"./settings.css\";\n\nexport default class Settings extends Component<{}, IPreferences> {\n\n    private keepUpdating: boolean = true;\n    private lastFrame: number = 0; \n    private rafId: number = 0;\n    private canvas?: HTMLCanvasElement;\n    private ctx?: CanvasRenderingContext2D;\n    private pieceRenderer?: BombFinderPieceRenderer;\n\n    async componentDidMount() {\n        const preferences = await Preferences.GetPreferences();\n        this.setState(preferences);\n        this.canvas = document.getElementById('preview') as HTMLCanvasElement;\n        this.ctx = this.canvas.getContext('2d')!;\n        this.pieceRenderer = new BombFinderPieceRenderer(preferences);\n        requestAnimationFrame(this.draw);\n    }\n\n    componentWillUnmount() {\n        this.keepUpdating = false;\n        cancelAnimationFrame(this.rafId);\n    }\n\n    handleChange = (event: any) => {\n        const target = event.target;\n        let value;\n        if (target.type === \"checkbox\") {\n            value = target.checked;\n        }\n        else {\n            value = parseInt(target.value, 10);\n            if (isNaN(value)) {\n                value = 0;\n            }\n        }\n        const name = target.name;\n\n        switch(name) {\n            case \"defaultCellSize\": this.pieceRenderer!.setCellSize(value); break;\n            case \"gridGapSize\":     this.pieceRenderer!.setGapSize(value); break;\n            case \"spinningCubes\":   this.pieceRenderer!.setSpinningCubes(value); break;\n            case \"simpleRender\":    this.pieceRenderer!.setSimpleRender(value); break;\n        }\n\n        this.setState({\n            [name]: value\n        } as Pick<Preferences, keyof Preferences>);\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        this.setState({\n            timestamp: new Date()\n        });\n        Preferences.Save(this.state);\n    }\n\n    draw = (delta: number) => {\n        const elapsedTime = delta - this.lastFrame!;\n        // clear board\n        const size = (this.state.defaultCellSize * 2) + this.state.gridGapSize;\n        this.ctx!.fillStyle = \"#333\";\n        this.ctx!.fillRect(0, 0, size, size);\n        // update and draw place holders\n        this.pieceRenderer!.update(elapsedTime);\n        [0, 0, 1, 1].forEach((c, i) => {\n            const index = (i % 2);\n            const x = 1 + (index * this.state.defaultCellSize) + (this.state.gridGapSize * index);\n            const y = 1 + (c * this.state.defaultCellSize) + (this.state.gridGapSize * c);\n            this.pieceRenderer!.drawPlaceHolder(this.ctx!, x, y, i);\n        });\n        if (this.keepUpdating) {\n            this.rafId = requestAnimationFrame(this.draw);\n            this.lastFrame = delta;\n        }\n    }\n\n    public render() {\n        if (!this.state) {\n            return <Loading />;\n        }\n        const dimensions = (this.state.defaultCellSize * 2) + this.state.gridGapSize + 2;\n        return (\n            <div className=\"settings\">\n                <h1>Settings</h1>\n                <form onSubmit={this.handleSubmit}>\n                    {/* <h3>User preferences</h3> */}\n\n                    <Slider text=\"Piece Length\"\n                        name=\"defaultCellSize\"\n                        max={125}\n                        min={25}\n                        value={this.state.defaultCellSize}\n                        onChange={this.handleChange} />\n\n                    <Slider text=\"Piece Gap\"\n                        name=\"gridGapSize\"\n                        max={50}\n                        min={5}\n                        value={this.state.gridGapSize}\n                        onChange={this.handleChange} />\n\n                    <Slider text=\"Spinning Cubes\"\n                        name=\"spinningCubes\"\n                        max={10}\n                        min={0}\n                        value={this.state.spinningCubes}\n                        onChange={this.handleChange} />\n\n                    <CheckBox text=\"Simple Render\"\n                        name=\"simpleRender\"\n                        checked={this.state.simpleRender}\n                        onChange={this.handleChange} />\n\n                    <h3>Grid Preview</h3>\n                    <div className=\"form-input center\">\n                        <canvas id=\"preview\" width={dimensions} height={dimensions}/>\n                    </div>\n\n                    <CheckBox text=\"Viberations\"\n                        name=\"vibration\"\n                        checked={this.state.vibration}\n                        onChange={this.handleChange} />\n                    \n                    <Button type=\"submit\" text=\"Save Changes\"/>\n                </form>\n                <p>\n                    <small>\n                        <strong>Last saved: </strong>\n                        <time>{this.state.timestamp.toLocaleString()}</time>\n                    </small>\n                </p>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport \"./Button.css\"\n\ninterface Props {\n    type: \"button\" | \"submit\";\n    className?: string;\n    disabled?: boolean;\n    text: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst Button: React.FC<Props> = ({ type, disabled, className, text, onClick }) => {\n    const disabledClass = (disabled) ? \"button disabled\" : \"button\";\n    const classes = (className) ? `${className} ${disabledClass}` : disabledClass;\n    if (onClick) {\n        return <button className={classes}\n            disabled={disabled}\n            type={type}\n            onClick={onClick}>\n            {text}\n        </button>\n    }\n    return <button className={classes} disabled={disabled} type={type}>{text}</button>\n}\n\nexport default Button;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","\nexport enum LoopOptions {\n    REPEAT,\n    ALTERNATE,\n    STOP\n}\n\nexport default class AnimationTimer {\n\n    private playing: boolean;\n    private timer = 0;\n    private target: number;\n    private step: number;\n    private loop: LoopOptions;\n    private alternated: boolean;\n\n    constructor(target: number, step: number, loop: LoopOptions = LoopOptions.STOP) {\n        this.timer = 0;\n        this.target = target;\n        this.step = step;\n        this.loop = loop;\n        this.alternated = false;\n        this.playing = true;\n    }\n\n    update(delta: number) {\n        if (!this.isComplete() && this.playing) {\n            this.timer += this.step;\n        } else {\n            if (this.loop === LoopOptions.REPEAT) {\n                this.timer = this.timer % this.target;\n            } else if (this.loop === LoopOptions.ALTERNATE) {\n                this.setStep(this.step * -1);\n                if (!this.alternated) {\n                    this.timer = 0;\n                } else {\n                    this.timer = this.target;\n                }\n            } else if (this.loop === LoopOptions.STOP) {\n                this.timer = this.target;\n                this.stop();\n            }\n        }\n    }\n\n    public stop() {\n        this.playing = false;\n    }\n\n    public play() {\n        this.playing = true;\n    }\n\n    public getValue() {\n        return this.timer;\n    }\n\n    public setTarget(target: number) {\n        this.target = target;\n    }\n\n    public setStep(step: number) {\n        if (step < 0) {\n            this.alternated = true;\n        } else {\n            this.alternated = false;\n        }\n        this.step = step;\n    }\n\n    public isComplete() {\n        return (this.alternated)\n            ? this.timer <= 0\n            : this.timer >= this.target;\n    }\n}","export enum Visibility {\n    INVISIBLE, // show default animation\n    VISIBLE,   // show the cell value\n    VISIBLY_SATISFIED, // show the cell's value in diffrent color\n    MARKED,    // show marked cell\n}\n\nexport const isVisible = (v: Visibility) => \n    v === Visibility.VISIBLE || v === Visibility.VISIBLY_SATISFIED;\n\nexport const isMarkable = (v: Visibility) =>\n    v === Visibility.MARKED || v === Visibility.INVISIBLE;\n\nexport const isMarked = (cell: Cell) => \n    cell.visibility === Visibility.MARKED;\n\nexport enum CellState {\n    BOMB,  // cell is a bomb\n    CLEAN, // cell is clean\n}\n\nexport type CellValue = null | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\nexport const incrementCellValue = (value?: CellValue): CellValue => {\n    switch (value) {\n        case 0: return 1;\n        case 1: return 2;\n        case 2: return 3;\n        case 3: return 4;\n        case 4: return 5;\n        case 5: return 6;\n        case 6: return 7;\n        case 7: return 8;\n        // these last 2 cases should rarely be called\n        case 8: return 8;\n        default: return null\n    }\n}\n\nexport const isBomb = (cv?: CellValue) => cv === null || cv === undefined;\n\nexport interface Cell {\n    hover: boolean;\n    visibility: Visibility;\n    readonly state: CellState;\n    readonly value?: CellValue;\n}\n","\n\nexport default function RandInRange(min: number, max: number) {\n    return Math.floor(Math.random() * max) + min;\n}","import AnimationTimer, { LoopOptions } from \"./Animation\";\nimport { Cell, Visibility, isBomb, CellValue } from \"../models/GameBoardTypes\";\nimport RandInRange from \"../util/Random\";\nimport { IPreferences } from \"../models/Preferences\";\n\nexport interface CanvasWindow {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\n/**\n * All the renderer cares about is rendering\n * a piece of the board.\n * \n * When drawing, you will pass in all the cell\n * details and it will be drawn\n */\nexport default class BombFinderPieceRenderer {\n\n    /**\n     * Invisible\n     * Invisible Marked\n     * 0 cell\n     * bomb cell\n     * 1-8 cells\n     * 1-8 cells satisfied\n     */\n    // the offsreen canvas can be this.pieceLength * 20 by this.pieceLength\n    // then when we are drawing we just grab the offset\n    // why not 3 diffrent canvases, animated get there own\n\n    // TODO: Add more off screen canvas updating\n    private invisiblePieceCanvas: HTMLCanvasElement;\n    private invisibleMarkedPieceCanvas: HTMLCanvasElement;\n    private staticPieceCanvas: HTMLCanvasElement[] = [];\n    private pieceAnimations: AnimationTimer[] = [];\n\n    private pieceLength: number;\n    private gapSize: number;\n    private simpleRender: boolean;\n    private exampleCellValue = RandInRange(0, 8);\n\n    constructor(settings: IPreferences) {\n        this.pieceLength = settings.defaultCellSize;\n        this.gapSize = settings.gridGapSize;\n        this.simpleRender = settings.simpleRender;\n        this.setSpinningCubes(settings.spinningCubes);\n        // set up canvas\n        this.invisiblePieceCanvas = document.createElement(\"canvas\");\n        this.invisiblePieceCanvas.height = this.pieceLength + 2;\n        this.invisiblePieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisiblePieceCanvas.getContext('2d')!, 1, 1);\n        this.invisibleMarkedPieceCanvas = document.createElement(\"canvas\");\n        this.invisibleMarkedPieceCanvas.height = this.pieceLength + 2;\n        this.invisibleMarkedPieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisibleMarkedPieceCanvas.getContext('2d')!, 1, 1, \"#3396ff\");\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i] = document.createElement(\"canvas\");\n            this.staticPieceCanvas[i].width = this.pieceLength + 2;\n            this.staticPieceCanvas[i].height = this.pieceLength + 2;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 1, 1.5, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 1, 1.5, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 1, 1.5, 0);\n            } else {\n                this.drawVisibleCell(ctx, 1, 1.5, undefined);\n            }\n        }\n    }\n\n    setCellSize(value: number) {\n        this.pieceLength = value;\n        // hard code invis\n        this.invisiblePieceCanvas.height = value;\n        this.invisiblePieceCanvas.width = value;\n        // marked invis\n        this.invisibleMarkedPieceCanvas.height = value;\n        this.invisibleMarkedPieceCanvas.width = value;\n        // everything else\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i].width = value;\n            this.staticPieceCanvas[i].height = value;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 0, 0, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 0, 0, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 0, 0, 0);\n            } else {\n                this.drawVisibleCell(ctx, 0, 0, undefined);\n            }\n        }\n    }\n\n    setGapSize(value: number) {\n        this.gapSize = value;\n    }\n\n    setSpinningCubes(value: number) {\n        this.pieceAnimations = [];\n        for (let i = value + 1; i >= 1; i--) {\n            this.pieceAnimations.push(\n                new AnimationTimer(90 * i, Math.pow(i + 1, i * .035) - 1, LoopOptions.ALTERNATE));\n        }\n    }\n\n    setSimpleRender(value: boolean) {\n        this.simpleRender = value;\n    }\n\n    update(delta: number) {\n        if (this.simpleRender) {\n            return;\n        }\n        for (let i = 0; i < this.pieceAnimations.length; i++) {\n            this.pieceAnimations[i].update(delta);\n        }\n        // get context\n        const ipcContext = this.invisiblePieceCanvas.getContext('2d')!;\n        const impcContext = this.invisibleMarkedPieceCanvas.getContext('2d')!;\n        // clear canvas\n        ipcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        impcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        // draw canvas\n        this.drawInvisiblePiece(ipcContext, 1, 1);\n        this.drawInvisiblePiece(impcContext, 1, 1, \"#3396ff\");\n    }\n\n    drawPlaceHolder(ctx: CanvasRenderingContext2D, x: number, y: number, visibility: Visibility = Visibility.INVISIBLE) {\n        ctx.save();\n        switch (visibility) {\n            case Visibility.INVISIBLE: this.drawInvisiblePiece(ctx, x, y); break;\n            case Visibility.MARKED: this.drawInvisiblePiece(ctx, x, y, \"#3396ff\"); break;\n            case Visibility.VISIBLE: this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue); break;\n            case Visibility.VISIBLY_SATISFIED:\n                this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue, \"#3396ff\"); break;\n        }\n        ctx.restore();\n    }\n\n    drawPiece(ctx: CanvasRenderingContext2D, cell: Cell, x: number, y: number) {\n        if (cell.visibility === Visibility.INVISIBLE) {\n            ctx.drawImage(this.invisiblePieceCanvas, x, y);\n            if (cell.hover) {\n                this.drawHover(ctx, x + 1, y + 1);\n                // add this as a debug feature cause its actually cool\n                // const index = this.getIndexByCell(cell);\n                // ctx.drawImage(this.staticPieceCanvas[index], x, y);\n            }\n        } else if (cell.visibility === Visibility.MARKED) {\n            ctx.drawImage(this.invisibleMarkedPieceCanvas, x, y);\n        } else {\n            const index = this.getIndexByCell(cell);\n            ctx.drawImage(this.staticPieceCanvas[index], x, y);\n        }\n    }\n\n    private getIndexByCell(cell: Cell) {\n        if (isBomb(cell.value)) {\n            return 17;\n        } else if (cell.value === 0) {\n            return 16;\n        } else {\n            if (cell.visibility === Visibility.VISIBLY_SATISFIED) {\n                return cell.value! - 1 + 8;\n            }\n            return cell.value! - 1;\n        }\n    }\n\n    private drawInvisiblePiece(ctx: CanvasRenderingContext2D, x: number, y: number, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"#FFF\";\n        }\n        this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctx.closePath();\n        ctx.restore();\n\n        if (this.simpleRender) {\n            return;\n        }\n\n        ctx.save();\n        let s = this.pieceLength;\n        let jump = 0;\n        for (let i = 1; i < this.pieceAnimations.length; i++) {\n            const rotation = (i % 2 === 0) ? 1 : -1;\n            this.drawRotatingSquare(ctx, jump + x, jump + y, s, i, rotation, overrideColor);\n            jump += (s / 4) / 2;\n            s = (s / 4) * 3;\n        }\n        ctx.restore();\n    }\n\n    private drawRotatingSquare(ctx: CanvasRenderingContext2D, worldX: number, worldY: number, cellLength: number,\n        i: number, rotationDirection: 1 | -1, overrideColor?: string) {\n        const radius = cellLength / 8;\n        let totalLength = cellLength / 2 + (radius * 2);\n        let x = worldX + cellLength / 4 - (radius);\n        let y = worldY + cellLength / 4 - (radius);\n\n        ctx.save();\n        ctx.beginPath();\n        // Draw the rotating bits inside of the circle\n        ctx.translate(x + totalLength / 2, y + totalLength / 2);\n        ctx.rotate(this.pieceAnimations[i].getValue() *  Math.PI / 180);\n        ctx.translate((x + totalLength / 2) * -1, (y + totalLength / 2) * -1);\n        this.drawRectangle(ctx, x, y, radius, totalLength);\n        ctx.lineWidth = 2;\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"gray\";\n        }\n\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    private drawRectangle(ctx: CanvasRenderingContext2D, x: number, y: number, radius: number, length: number) {\n        // start\n        ctx.moveTo(x + radius, y);\n        // top\n        ctx.lineTo(x + length - radius, y);\n        ctx.quadraticCurveTo(x + length, y, x + length, y + radius);\n        // right\n        ctx.lineTo(x + length, y + length - radius);\n        ctx.quadraticCurveTo(x + length, y + length, x + length - radius, y + length);\n        // bottom\n        ctx.lineTo(x + radius, y + length);\n        ctx.quadraticCurveTo(x, y + length, x, y + length - radius);\n        // left\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n    }\n    \n    private drawHover(ctx: CanvasRenderingContext2D, x: number, y: number) {\n        ctx.save()\n        let alpha = 1.0;\n        for (let i = 1; i <= (this.gapSize / 2); i++) {\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(255,255,255, ${alpha})`;\n            this.drawRectangle(ctx, x - i, y - i, (this.pieceLength) / 8,\n                this.pieceLength + (i * 2));\n            if ((i + 1) >= (this.gapSize / 2)) {\n                ctx.lineWidth = 1;\n            } else {\n                ctx.lineWidth = 2;\n            }\n            alpha -= 0.1;\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n\n    private drawVisibleCell(ctx: CanvasRenderingContext2D, x: number, y: number, cellValue?: CellValue, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        let length = this.pieceLength;\n        if (isBomb(cellValue)) {\n            // let radius = 3;\n            // draw the outline of the shape\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#690721\";\n            ctx.lineWidth = 4;\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n            // draw inner circle\n            ctx.save();\n            ctx.beginPath();\n            length -= 6;\n            ctx.arc(x + 3 + length / 2, y + 3 + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#f00f4b\";\n            ctx.lineWidth = 3;\n            // gradient \n\n            const innerX = x + (length / 2);\n            const innerY = y + (length / 2);\n            var gradient = ctx.createRadialGradient(\n                innerX, innerY, this.pieceLength / 6,\n                innerX, innerY, this.pieceLength / 2);\n\n            // Add three color stops\n            gradient.addColorStop(0, '#333');\n            gradient.addColorStop(1, '#690721');\n\n            // fill shap\n            ctx.fillStyle = gradient;\n            ctx.fill();\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n\n        } else if (cellValue === 0) {\n            this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = \"gray\";\n        } else {\n            if (overrideColor) {\n                ctx.fillStyle = overrideColor;\n                ctx.strokeStyle = overrideColor;\n            } else {\n                ctx.fillStyle = \"#FFFFFF\";\n                ctx.strokeStyle = \"#FFFFFF\"\n            }\n            // http://www.ckollars.org/canvas-text-centering.html\n            ctx.font = `normal ${this.pieceLength}px sans-serif`;\n            // const measurements = ctx.measureText(String(cell.value));\n            const offset = (this.pieceLength / 2) + 2;\n            const ypos = y + (this.pieceLength / 2) + offset;// + this.pieceLength;\n            const xpos = x + (this.pieceLength / 2);\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"bottom\";\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.lineWidth = 2;\n            ctx.fillText(String(cellValue), xpos, ypos);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n}","import React from 'react';\nimport \"./CheckBox.css\"\n\ninterface Props {\n    text: string;\n    name: string;\n    checked: boolean;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst CheckBox: React.FC<Props> = ({text, name, checked, onChange}) => {\n    return  <label className=\"checkbox\">\n        <input type=\"checkbox\"\n            name={name}\n            checked={checked}\n            onChange={onChange}  />\n            <span>{text}</span>\n    </label>\n}\n\nexport default CheckBox;","import { Table, Field, Query, IDBTable } from \"../logic/MetaDataStorage\";\n\nexport interface IPreferences {\n    // soundVolume: number;\n    // musicVolume: number;\n    defaultCellSize: number; // slider\n    gridGapSize: number;     // slider\n    spinningCubes: number;   // slider\n    simpleRender: boolean;   // checkbox\n    // fullScreen: boolean; // checkbox, don't save\n    vibration: boolean;\n    timestamp: Date;\n}\n\n@Table(\"settings\")\nexport default class Preferences implements IPreferences, IDBTable {\n    \n    public tableName = \"settings\";\n\n    @Field(\"settings\", true)\n    public readonly id: string = \"preferences\";\n\n    @Field(\"settings\")\n    public defaultCellSize: number = 35;\n\n    @Field(\"settings\")\n    public gridGapSize: number = 8.5;\n\n    @Field(\"settings\")\n    public spinningCubes: number = 7;\n\n    @Field(\"settings\")\n    public simpleRender: boolean = false;\n\n    @Field(\"settings\")\n    public vibration: boolean = false;\n    \n    @Field(\"settings\")\n    public timestamp: Date = new Date();\n\n    static async GetPreferences(): Promise<IPreferences> {\n        const preferences = new Preferences();\n        const cachedSettings = await Query.getById(preferences, preferences.id);\n        // not defined\n        if (cachedSettings === undefined) {\n            return preferences;\n        } else {\n            return cachedSettings;\n        }\n    }\n\n    static async Save(preferences: IPreferences) {\n        preferences.timestamp = new Date();\n        const settings = Object.assign(new Preferences(), preferences);\n        return await Query.save(settings);\n    }\n\n}"],"sourceRoot":""}