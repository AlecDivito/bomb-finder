{"version":3,"sources":["logic/MetaDataStorage.ts","components/Loading.tsx","models/Statistics.ts","models/Games.ts","util/uuid.ts","assets/info.svg","assets/cog-f.svg","assets/arrows-fullscreen.svg","assets/arrow-left.svg","assets/home-f.svg","util/isInstalled.ts","pages/home.tsx","components/Footer.tsx","components/Header.tsx","App.tsx","util/isUuid.ts","serviceWorker.ts","index.tsx"],"names":["StorageOption","MetaDataStorage","Object","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","storage","tableQueue","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","value","table","fields","filter","item","map","field","keys","primaryKey","undefined","record","push","isPrimary","find","o","metaData","s","instance","Query","database","window","indexedDB","storageType","INDEXDB","MEMORY","_connection","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","tableName","version","request","_this","wrap","_context","prev","next","open","location","hostname","sent","abrupt","Promise","resolve","reject","onerror","event","onupgradeneeded","target","result","tableMetaData","getInstance","getMetaData","Error","objectStore","createObjectStore","keyPath","autoIncrement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","createIndex","unique","err","return","onsuccess","stop","_x","_x2","apply","arguments","_refreshDatabase","_callee2","_context2","connection","close","_x3","id","replace","toLocaleLowerCase","_save","_callee4","obj","query","_context4","isObject","memoryDb","Instance","_ref","_callee3","save","_context3","objectStoreNames","contains","refreshDatabase","includes","forEach","transaction","put","_x5","_x6","_x4","_getAll","_callee6","type","data","_context6","t","_ref2","_callee5","_context5","openCursor","cursor","continue","_x9","_x10","_x7","_x8","_getById","_callee8","_context8","_ref3","_callee7","_context7","get","_x13","_x14","_x11","_x12","_remove","_callee10","_context10","_ref4","_callee9","_context9","getPrimaryKey","delete","_x16","_x17","_x15","Table","name","addTable","Field","length","propertyName","addField","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Loading","createElement","className","Statistics","wins","losses","inprogress","statistics","getAll","allStatisticsObjects","stat","allStatistics","bestTime","worstTime","averageTime","averageMoves","totalTimePlayed","Math","round","assign","unshift","getById","sanitizeId","cacheStats","GetStats","game","difficulty","floor","time","ComputeAvg","gamesPlayed","totalMoves","numOfItems","currentAverage","newValue","Games","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","_Users_alecdivito_Documents_JS_bomb_finder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_initializerDefineProperty__WEBPACK_IMPORTED_MODULE_2__","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","oldGame","Create","width","height","bombs","newGame","logAndDestroy","console","log","updatedAt","Date","remove","AddGameResults","uuid","invisiblePieces","totalPieces","AddGame","stats","warn","GetById","games","i","getTime","c","crypto","getRandomValues","Uint8Array","toString","d","__webpack_exports__","module","exports","p","isInstalled","matchMedia","matches","navigator","standalone","Home","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","installPrompt","installApp","asyncToGenerator","regenerator_default","prompt","userChoice","then","outcome","setState","installButton","state","loading","gameId","GetLastPlayedGame","addEventListener","e","preventDefault","_this2","react_default","react_router_dom","to","concat","onClick","Component","Footer","fullscreen","doc","document","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","src","info","alt","fullscreenEnabled","fullScreenIcon","settings","React","withRouter","pathname","history","goBack","back","home","CustomGameForm","lazy","bind","About","GameMenu","HowToPlay","Settings","Game","GameWon","Stats","PageNotFound","ManageGameTemplates","App","ReactGA","initialize","debug","process","prevProps","onRouteChanged","pageview","hideDefaultNavigation","gridStyle","pathArray","split","RegExp","test","getElementById","style","gridTemplateRows","Fragment","src_components_Header","react","fallback","react_router","exact","path","component","Footer_Footer","PureComponent","isLocalhost","Boolean","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","basename","src_App","URL","href","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.def2971c.chunk.js","sourcesContent":["import { isObject } from \"util\";\n\ntype TableMetaData = {\n    table: string,\n    primaryKey?: string,\n    fields: string[],\n};\n\nexport class MetaDataStorage {\n\n    private static instance: MetaDataStorage;\n\n    private storage: Array<TableMetaData>;\n    \n    private tableQueue: Array<{\n        primaryKey: boolean,\n        table: string;\n        field: string;\n    }>;\n\n    private constructor() {\n        this.storage = [];\n        this.tableQueue = [];\n    }\n\n    public static getInstance() {\n        return MetaDataStorage.instance ||\n            (MetaDataStorage.instance = new MetaDataStorage());\n    }\n\n    public addTable(table: string) {\n        const fields = this.tableQueue\n            .filter(item => item.table === table)\n            .map(item => item.field);\n        const keys = this.tableQueue\n            .filter(item => item.primaryKey)\n            .filter(item => item.table === table);\n        let primaryKey = undefined; \n        if (keys[0]) {\n            primaryKey = keys[0].field;\n        }\n        const record = { table, fields, primaryKey };\n        this.storage.push(record);\n    }\n\n    public addField(table: string, field: string, isPrimary: boolean) {\n        const item = this.storage.find((o) => o.table === table);\n        if (item !== undefined) {\n            item.fields.push(field);\n        }\n        else {\n            this.tableQueue.push({ table, field, primaryKey: isPrimary});\n        }\n    }\n\n    public getPrimaryKey(table: string): string | undefined {\n        const metaData = this.storage.find(s => s.table === table);\n        if (!metaData) {\n            return undefined;\n        }\n        if (!metaData.primaryKey) {\n            return undefined;\n        }\n        return metaData.primaryKey;\n    }\n\n    public getMetaData(table: string): TableMetaData | undefined {\n        return this.storage.find(s => s.table === table);\n    }\n}\n\nenum StorageOption {\n    INDEXDB,\n    MEMORY,\n}\n\nexport interface IDBTable {\n    tableName: string;\n    id: string;\n}\n\nexport class Query {\n\n    private static instance: Query;\n    private static storageType: StorageOption;\n    private static memoryDb: any = {};\n    private database?: IDBDatabase;\n\n    private constructor() {\n        if (window.indexedDB) {\n            Query.storageType = StorageOption.INDEXDB;\n        } else {\n            Query.storageType = StorageOption.MEMORY;\n        }\n    }\n\n    private static Instance() {\n        if (!Query.instance) {\n            Query.instance = new Query();\n        }\n        return Query.instance;\n    }\n\n    static sanitizeId(id: string) {\n        return id.replace(\" \", \"_\").toLocaleLowerCase();\n    }\n\n    // TODO: object should extend an object with id garenteed on the object\n    //       that way we can sanitize the id\n    //       There should be sanitization for every id\n    static async save<T extends IDBTable>(obj: T): Promise<boolean> {\n        if (Query.storageType === StorageOption.MEMORY) {\n            if (!isObject(Query.memoryDb[obj.tableName])) {\n                Query.memoryDb[obj.tableName] = {};\n            }\n            Query.memoryDb[obj.tableName][obj.id] = obj;\n            return true;\n        }\n        const query = Query.Instance();\n        return new Promise(async (resolve, reject) => {\n            if (!query.database) {\n                await query.connection(obj.tableName);\n            }\n            let metaData = MetaDataStorage.getInstance().getMetaData(obj.tableName);\n            if (!query.database!.objectStoreNames.contains(obj.tableName)) {\n                // The database currently doesn't have our table in the database\n                // increment the version and reopen the database\n                await query.refreshDatabase(obj.tableName);\n                metaData = MetaDataStorage.getInstance().getMetaData(obj.tableName);\n            }\n            \n            const save: any = {};\n            Object.keys(obj)\n                .filter(key => metaData!.fields.includes(key))\n                .forEach(key => save[key] = (obj as any)[key]);\n\n            const request = query.database!\n                .transaction(obj.tableName, \"readwrite\")\n                .objectStore(obj.tableName)\n                .put(save);\n            request.onerror = (event) => {\n                reject(false);\n            };\n            request.onsuccess = (event) => {\n                resolve(true);\n            };\n        });\n    }\n\n    static async getAll<T extends IDBTable>(type: T, filter?: (record: T) => boolean ): Promise<T[]> {\n        const data: any = [];\n        if (Query.storageType === StorageOption.MEMORY) {\n            if (!isObject(Query.memoryDb[type.tableName])) {\n                return data;\n            }\n            return Object.keys(Query.memoryDb[type.tableName])\n                .map(id => Query.memoryDb[type.tableName][id])\n                .filter(t => (filter) ? filter(t) : true);\n        }\n        const query = Query.Instance();\n        return new Promise(async (resolve, reject) => {\n            if (!query.database) {\n                await query.connection(type.tableName);\n            }\n            if (!query.database!.objectStoreNames.contains(type.tableName)) {\n                resolve(data);\n            }\n            else {\n                const request = query.database!\n                    .transaction([type.tableName], \"readonly\")\n                    .objectStore(type.tableName)\n                    .openCursor();\n\n                request.onerror = (event) => {\n                    reject(data);\n                };\n                request.onsuccess = (event: Event) => {\n                    let cursor = (event.target as IDBRequest).result;\n                    if (cursor) {\n                        if (!filter || (filter && filter(cursor.value))) {\n                            data.push(cursor.value);\n                        }\n                        cursor.continue();\n                    }\n                    if (!cursor) {\n                        resolve(data);\n                    }\n                };\n            }\n        });\n    }\n\n    static async getById<T extends IDBTable>(type: T, id: string): Promise<T | undefined> {\n        if (Query.storageType === StorageOption.MEMORY) {\n            if (!isObject(Query.memoryDb[type.tableName])) {\n                return undefined;\n            }\n            return Query.memoryDb[type.tableName][id];\n        }\n        const query = Query.Instance();\n        return new Promise(async (resolve, reject) => {\n            if (!query.database) {\n                await query.connection(type.tableName);\n            }\n            if (!query.database!.objectStoreNames.contains(type.tableName)) {\n                resolve(undefined);\n            }\n            else {\n                const request = query.database!\n                    .transaction([type.tableName], \"readonly\")\n                    .objectStore(type.tableName)\n                    .get(id);\n                request.onerror = (event) => {\n                    reject(undefined);\n                };\n                request.onsuccess = (event) => {\n                    resolve(request.result);\n                };\n            }\n        });\n    }\n\n    static async remove<T extends IDBTable>(type: T): Promise<boolean> {\n        if (Query.storageType === StorageOption.MEMORY) {\n            if (!isObject(Query.memoryDb[type.tableName])) {\n                return true;\n            }\n            if (isObject(Query.memoryDb[type.tableName][type.id])) {\n                delete Query.memoryDb[type.tableName][type.id];\n            }\n            return true;\n        }\n        const query = Query.Instance();\n        return new Promise(async (resolve, reject) => {\n            if (!query.database) {\n                await query.connection(type.tableName);\n            }\n            const key = MetaDataStorage.getInstance().getPrimaryKey(type.tableName);\n            if (!key) {\n                reject(false);\n                return;\n            }\n            const id: string = (type as any)[key];\n            const request = query.database!\n                .transaction([type.tableName], \"readwrite\")\n                .objectStore(type.tableName)\n                .delete(id);\n            request.onerror = (event) => {\n                reject(false);\n            };\n            request.onsuccess = (event) => {\n                resolve(true);\n            };\n        })\n    }\n\n    private async connection(tableName: string, version?: number) {\n        const request = await window.indexedDB.open(window.location.hostname, version);\n        return new Promise((resolve, reject) => {\n            request.onerror = (event) => {\n                Query.storageType = StorageOption.MEMORY;\n                reject();\n            }\n\n            request.onupgradeneeded = (event: any /* IDBVersionChangeEvent */) => {\n                // save the database\n                const database: IDBDatabase = event.target.result;\n                // create an object store for this database\n                const tableMetaData = MetaDataStorage.getInstance().getMetaData(tableName);\n                if (tableMetaData === undefined) {\n                    throw new Error(\"No table found\");\n                }\n                // create the table\n                const objectStore = database!.createObjectStore(tableName, {\n                    keyPath: tableMetaData.primaryKey!,\n                    autoIncrement: false\n                });\n\n                // create the columns\n                for (const field of tableMetaData!.fields) {\n                    if (field === tableMetaData!.primaryKey) {\n                        continue;\n                    }\n                    objectStore.createIndex(field, field, {\n                        unique: false\n                    });\n                }\n                // currently assuming everything went hunky dory\n                // if this exits successfully, trigger onsuccess callback\n            }\n\n            request.onsuccess = (event: any) => {\n                this.database = event.target.result;\n                resolve();\n            }\n        });\n    }\n\n    private async refreshDatabase(tableName: string) {\n        if (!this.database) {\n            await this.connection(tableName);\n        }\n        const version = this.database!.version + 1;\n        this.database!.close();\n        await this.connection(tableName, version);\n    }\n}\n\nexport function Table(name: string) {\n    return function (target: Function) {\n        MetaDataStorage.getInstance().addTable(name);\n    }\n}\n\nexport function Field(tableName: string, isPrimary: boolean = false) {\n    return function (target: any, propertyName: string) {\n        MetaDataStorage.getInstance()\n            .addField(tableName, propertyName, isPrimary);\n    }\n}\n","import React from 'react';\nimport \"./Loading.css\"\n\nconst Loading: React.FC = () => {\n    return <div className=\"loading\">\n        Loading\n        <span className=\"loading--period\">.</span>\n        <span className=\"loading--period\">.</span>\n        <span className=\"loading--period\">.</span>\n    </div>\n}\n\nexport default Loading","import { IDBTable, Table, Field, Query } from \"../logic/MetaDataStorage\";\nimport Games from \"./Games\";\n\nexport interface IStatistics {\n    id: string;\n    name: string;\n    // time\n    bestTime: number;\n    worstTime: number;\n    averageTime: number\n    totalTimePlayed: number;\n    // games played\n    wins: number;\n    losses: number;\n    inprogress: number\n    // other\n    averageMoves: number;\n}\n\n@Table(\"stats\")\nexport default class Statistics implements IStatistics, IDBTable {\n\n    public tableName = \"stats\";\n\n    // Game Difficulty\n    @Field(\"stats\", true)\n    public id: string = \"\";\n\n    @Field(\"stats\")\n    public name: string = \"\";\n\n    // best and worst\n    @Field(\"stats\")\n    public bestTime: number = 0;\n\n    @Field(\"stats\")\n    public worstTime: number = 0;\n\n    @Field(\"stats\")\n    public averageTime: number = 0;\n\n    @Field(\"stats\")\n    public totalTimePlayed: number = 0;\n\n    // Games Played\n    @Field(\"stats\")\n    public wins: number = 0;\n\n    @Field(\"stats\")\n    public losses: number = 0;\n\n    @Field(\"stats\")\n    public inprogress: number = 0;\n\n    // Other\n    @Field(\"stats\")\n    public averageMoves: number = 0;\n\n\n    public get gamesPlayed() {\n        return this.wins + this.losses + this.inprogress;\n    }\n\n    public static async GetAllStatistics(): Promise<Statistics[]> {\n        const statistics = new Statistics();\n        const allStatisticsObjects: IStatistics[] = await Query.getAll(statistics);\n        if (allStatisticsObjects.length === 0) {\n            return [];\n        }\n        // calculate total\n        const stat = new Statistics();\n        stat.name = \"All Game Modes\";\n        const allStatistics = allStatisticsObjects.map( (item) => {\n            // global all games\n            stat.bestTime = (item.bestTime < stat.bestTime) ? item.bestTime : stat.bestTime;\n            stat.worstTime = (item.worstTime > stat.worstTime) ? item.worstTime : stat.worstTime;\n            stat.averageTime += item.averageTime;\n            stat.averageMoves += item.averageMoves;\n            stat.wins += item.wins;\n            stat.losses += item.losses;\n            stat.inprogress += item.inprogress;\n            stat.totalTimePlayed += item.totalTimePlayed;\n            // spesific item\n            item.averageMoves = Math.round(item.averageMoves);\n            return Object.assign(new Statistics(), item);\n        }, statistics);\n        stat.averageMoves = Math.round(stat.averageMoves / allStatistics.length);\n        stat.averageTime = stat.averageTime / allStatistics.length;\n        allStatistics.unshift(stat);\n        return allStatistics;\n    }\n\n    public static async GetStats(id: string): Promise<Statistics> {\n        const statistics = new Statistics();\n        const cacheStats = await Query.getById(statistics, Query.sanitizeId(id));\n        // not undefined\n        if (cacheStats === undefined) {\n            return statistics;\n        } else {\n            return Object.assign(statistics, cacheStats);\n        }\n    }\n\n    public static async AddGame(id: string) {\n        const s = await Statistics.GetStats(Query.sanitizeId(id));\n        s.inprogress += 1;\n        s.name = id;\n        s.id = Query.sanitizeId(id);\n        return await Query.save(s);\n    }\n\n    public static async AddGameResults(game: Games): Promise<boolean> {\n        if (game.result === \"created\" || game.result === \"inprogress\") {\n            return Promise.resolve(false);\n        }\n        const s = await Statistics.GetStats(game.difficulty);\n        // general stuff and averages\n        s.inprogress -= 1;\n        if (Math.floor(game.time) === 0) {\n            s.totalTimePlayed += 1;\n        } else {\n            s.totalTimePlayed += game.time;\n        }\n        \n        // wins\n        if (game.result === \"won\") {\n            s.wins += 1;\n            s.averageMoves = Statistics.ComputeAvg(s.gamesPlayed, s.averageMoves, game.totalMoves);\n            s.averageTime = Statistics.ComputeAvg(s.gamesPlayed, s.averageTime, game.time);\n            \n            // best times per game type\n            if (s.bestTime >= game.time || s.bestTime === 0) { // best time doesn't exist for difficulty\n                if (Math.floor(game.time) === 0) {\n                    s.bestTime = 1;\n                } else {\n                    s.bestTime = Math.floor(game.time);\n                }\n            }\n            if (s.worstTime <= game.time || s.worstTime === 0) {\n                if (Math.floor(game.time) === 0) {\n                    s.worstTime = 1;\n                } else {\n                    s.worstTime = Math.floor(game.time);\n                }\n            }\n        }\n        // losses\n        else {\n            s.losses += 1;\n        }\n        \n        return await Query.save(s);\n    }\n\n    private static ComputeAvg(numOfItems: number, currentAverage: number, newValue: number) {\n        if (numOfItems <= 1) {\n            return newValue;\n        }\n        return (currentAverage * (numOfItems - 1) + newValue) / numOfItems;\n    }\n}","import { Table, Field, Query, IDBTable } from '../logic/MetaDataStorage';\nimport { GameDifficulty, GameProgress } from './GameTypes';\nimport { Cell } from './GameBoardTypes';\nimport uuid from '../util/uuid';\nimport Statistics from './Statistics';\n\nexport interface IGames {\n    id: string;\n    time: number;\n    difficulty: GameDifficulty;\n    width: number;\n    height: number;\n    bombs: number;\n    board: Cell[];\n    totalMoves: number;\n    invisiblePieces: number;\n    isComplete: boolean;\n    result: GameProgress;\n    updatedAt: Date;\n    createdAt: Date;\n}\n\n@Table(\"Games\")\nexport default class Games implements IGames, IDBTable {\n    \n    public tableName = \"Games\";\n\n    // Initial Game data\n    @Field(\"Games\", true)\n    public id: string = \"\";\n    @Field(\"Games\")\n    public time: number = 0;\n    @Field(\"Games\")\n    public difficulty: GameDifficulty = \"\";\n    @Field(\"Games\")\n    public width: number = 0;\n    @Field(\"Games\")\n    public height: number = 0;\n    @Field(\"Games\")\n    public bombs: number = 0;\n\n    // Game being played data\n    @Field(\"Games\")\n    public board: Cell[] = [];\n    @Field(\"Games\")\n    public totalMoves: number = 0;\n    @Field(\"Games\")\n    public invisiblePieces: number = 0;\n    @Field(\"Games\")\n    public isComplete: boolean = false;\n    @Field(\"Games\")\n    public result: GameProgress = \"created\";\n    @Field(\"Games\")\n    public updatedAt: Date = new Date();\n    @Field(\"Games\")\n    public createdAt: Date = new Date();\n\n    private constructor() { }\n\n    public get totalPieces() {\n        return (this.width * this.height) - this.bombs;\n    }\n\n    public get gameHasStarted() {\n        return this.result === \"inprogress\";\n    }\n\n    public get area() {\n        return this.width * this.height;\n    }\n\n    public set setResult(result: GameProgress) {\n        if (this.result !== \"lost\" && this.result !== \"won\") {\n            this.result = result;\n        }\n    }\n\n    /**\n     * \n     * @param game game thats finished\n     * @param newId id of the new game\n     */\n    public async reset(oldGame: Games): Promise<Games> {\n        // TODO: Add error handling (need to add in games first (down there))\n        const newGame = await Games.Create(oldGame.difficulty, oldGame.width,\n            oldGame.height, oldGame.bombs);\n        const logged = await oldGame.logAndDestroy();\n        if (!logged) {\n            console.log('error logging completed game');\n        }\n        return newGame;\n    }\n\n    public update(): Promise<boolean> {\n        this.updatedAt = new Date();\n        return Query.save(this);\n    }\n\n    public async logAndDestroy() {\n        // TODO: maybe throw an error here, if one fails, can't really tell which\n        //       one failed\n        return await Query.remove(this) && await Statistics.AddGameResults(this);\n    }\n\n    static async Create(\n        difficulty: GameDifficulty,\n        width: number,\n        height: number,\n        bombs: number,\n    ) {\n        const game = new Games();\n        game.id = uuid();\n        game.difficulty = difficulty;\n        game.width = width;\n        game.height = height;\n        game.bombs = bombs;\n        game.invisiblePieces = game.totalPieces;\n        const result = await Query.save(game);\n        const stats = await Statistics.AddGame(game.difficulty);\n        if (!result) {\n            // TODO: Add Error handling\n            // this is temporary\n            console.warn(\"Couldn't save new game\");\n        }\n        if (!stats) {\n            console.warn(\"Couldn't save stats\");\n        }\n        return game;\n    } \n\n    static async DoesGameExists(id: string): Promise<boolean> {\n        try {\n            await Games.GetById(id);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    static async GetById(id: string): Promise<Games> {\n        const result = await Query.getById(new Games(), id);\n        if (result === undefined) {\n            // TODO: better error message\n            throw new Error(\"Game does not exist, This shouldn't be called\");\n        }\n        const newGame = Object.assign(new Games(), result);\n        return newGame;\n    }\n\n    static async GetUnfinishedGames(): Promise<IGames[]> {\n        const data = await Query.getAll(new Games(),\n            (game: Games) => game.result === \"created\" || game.result === \"inprogress\"\n        );\n        return data;\n    }\n\n    static async GetLastPlayedGame(): Promise<IGames | undefined> {\n        const games: IGames[] = await Query.getAll(new Games());\n        if (games.length === 0) {\n            return undefined;\n        }\n        let game = games[0];\n        for (let i = 1; i < games.length; i++) {\n            if (!game.updatedAt || games[i].updatedAt) {\n                continue;\n            }\n            if (game.updatedAt.getTime() < games[i].updatedAt.getTime()) {\n                game = games[i];\n            }\n        }\n        return game;\n    }\n}","export default function uuid() {\n    const temp: any = [1e7];\n    // eslint-disable-next-line\n    return (temp + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c: any) =>\n        // eslint-disable-next-line\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n}","module.exports = __webpack_public_path__ + \"static/media/info.4137872d.svg\";","module.exports = __webpack_public_path__ + \"static/media/cog-f.54d5d725.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrows-fullscreen.b8e801e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-left.e2ccdb63.svg\";","module.exports = __webpack_public_path__ + \"static/media/home-f.62ae8e4f.svg\";","\nfunction isInstalled() {\n    return  ((window.matchMedia\n        && window.matchMedia('(display-mode: standalone)').matches))\n        || ((window.navigator as any).standalone === true);\n}\n\nexport default isInstalled;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./home.css\"\nimport Games from \"../models/Games\";\nimport Loading from \"../components/Loading\";\nimport isInstalled from \"../util/isInstalled\";\n\ninterface State {\n    loading: boolean;\n    installButton: boolean;\n    gameId?: string;\n}\n\nexport default class Home extends Component<{}, State> {\n\n    private installPrompt: any = null;\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            loading: true,\n            installButton: false,\n            gameId: undefined,\n        };\n    }\n\n    async componentDidMount() {\n        const game = await Games.GetLastPlayedGame();\n        if (game) {\n            this.setState({ loading: false, gameId: game.id });\n        } else {\n            this.setState({ loading: false });\n        }\n        window.addEventListener('beforeinstallprompt', (e) => {\n            // older browsers\n            e.preventDefault();\n            this.installPrompt = e;\n            // See if the app is already installed, in that case, do nothing\n            if (isInstalled()) {\n                return false;\n            }\n            // Set the state variable to make button visible\n            this.setState({ installButton: true });\n        });\n    }\n\n    installApp = async () => {\n        if (!this.installPrompt) {\n            return false;\n        }\n        this.installPrompt.prompt();\n        this.installPrompt.userChoice\n            .then((outcome: any) => {\n                if (outcome.outcome === 'accepted') {\n                    // TODO: Post message (install successful)\n                } else {\n                    // TODO: Post message (install unsuccessful)\n                }\n                // Remove the event reference\n                this.installPrompt = null;\n                // Hide the button\n                this.setState({ installButton: false });\n            });\n    }\n\n    public render() {\n        if (this.state.loading) {\n            return <Loading />\n        }\n        return (\n            <div className=\"home\">\n                <div className=\"home__header\">\n                    <h1 className=\"home__header--center\">Bomb Finder!</h1>\n                </div>\n                <ul className=\"home__list\">\n                    {\n                        (this.state.gameId)\n                            ? <li className=\"home__list__item\">\n                                <Link to={`/game/${this.state.gameId}`}>CONTINUE</Link>\n                            </li>\n                            : null\n                    }\n                    <li className=\"home__list__item\">\n                        <Link to=\"/menu\">NEW GAME</Link>\n                    </li>\n                    <li className=\"home__list__item\">\n                        <Link to=\"/stats\">STATISTICS</Link>\n                    </li>\n                    <li className=\"home__list__item\">\n                        <Link to=\"/settings\">SETTINGS</Link>\n                    </li>\n                    <li className=\"home__list__item\">\n                        <Link to=\"/how-to-play\">HOW TO PLAY</Link>\n                    </li>\n                    {\n                        (this.state.installButton)\n                        ? <li className=\"home__list__item\">\n                            <span onClick={this.installApp}>INSTALL APP</span>\n                        </li>\n                        : null\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./Footer.css\"\nimport info from \"../assets/info.svg\";\nimport settings from \"../assets/cog-f.svg\";\nimport fullScreenIcon from \"../assets/arrows-fullscreen.svg\";\n\nexport default class Footer extends React.Component {\n\n    fullscreen = () => {\n        // TODO: Fix issue in typescript typing, for right now just any type it\n        // https://github.com/Microsoft/TypeScript/issues/28681\n        let doc = document as any;\n        if (!doc.fullscreenElement) {\n            doc.documentElement.requestFullscreen();\n        } else {\n            if (doc.exitFullscreen) {\n                doc.exitFullscreen();\n            }\n        }\n    }\n\n    render() {\n        return (\n            <footer className=\"footer\">\n                <Link to=\"/how-to-play\">\n                    <img src={info} alt=\"Info\" />\n                </Link>\n                {(!document.fullscreenEnabled)\n                    ? null\n                    : <div onClick={this.fullscreen}>\n                        <img src={fullScreenIcon} alt=\"fullscreen\" />\n                    </div>\n                }\n                <Link to=\"/settings\">\n                    <img src={settings} alt=\"Settings\" />\n                </Link>\n            </footer>\n        );\n    }\n}\n","import React from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport back from \"../assets/arrow-left.svg\";\nimport home from \"../assets/home-f.svg\";\nimport \"./Header.css\"\n\nconst Header: React.FC<RouteComponentProps> = (props: RouteComponentProps) => {\n    if (props.location.pathname === \"/\") {\n        return <div className=\"header--hidden\">BombFinder</div>;\n    }\n    return (\n        <header className=\"header\">\n            <div className=\"header__link\"\n                onClick={() => props.history.goBack()}>\n                <img src={back} alt=\"Back\" />\n            </div>\n            <h3>\n                BombFinder\n            </h3>\n            <Link to=\"/\" className=\"header__link\">\n                <img src={home} alt=\"Home\" />\n            </Link>\n        </header>\n    );\n}\n\nexport default withRouter(Header);","import React, { lazy, Suspense } from 'react';\nimport { Route, withRouter, RouteComponentProps, Switch } from 'react-router';\nimport Loading from './components/Loading';\nimport ReactGA from 'react-ga';\n\nimport Home from './pages/home';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport isUuid from './util/isUuid';\n\nconst CustomGameForm = lazy( () => import('./pages/custom-game'));\nconst About = lazy( () => import('./pages/about'));\nconst GameMenu = lazy( () => import('./pages/game-menu'));\nconst HowToPlay = lazy( () => import('./pages/how-to-play'));\nconst Settings = lazy( () => import('./pages/settings'));\nconst Game = lazy( () => import('./pages/game'));\nconst GameWon = lazy( () => import('./pages/game-won'));\nconst Stats = lazy( () => import('./pages/stats'));\nconst PageNotFound = lazy( () => import('./pages/page-not-found'));\nconst ManageGameTemplates = lazy( () => import('./pages/manage-templates'));\n\n\nclass App extends React.PureComponent<RouteComponentProps, {}> {\n\n    componentDidMount() {\n        ReactGA.initialize('UA-143146753-1', {\n            debug: process.env.NODE_ENV !== 'production'\n        });\n    }\n\n    componentDidUpdate(prevProps: RouteComponentProps) {\n        if (this.props.location !== prevProps.location) {\n            this.onRouteChanged();\n        }\n    }\n\n    onRouteChanged() {\n        ReactGA.pageview(this.props.location.pathname);\n    }\n\n    render() {        \n        let hideDefaultNavigation = true;\n        let gridStyle = \"\";\n        const pathArray = this.props.location.pathname.split(\"/\");\n        if (this.props.location.pathname === \"/\") {\n            gridStyle = \"0px 1fr 60px\";\n        } else if (pathArray.length === 3 && pathArray[1] === \"game\" && isUuid(pathArray[2])) {\n            hideDefaultNavigation = false;\n            gridStyle = \"0px 1fr 0px\";\n        } else {\n            gridStyle = \"60px 1fr 60px\";\n        }\n        document.getElementById(\"root\")!.style.gridTemplateRows = gridStyle;\n\n        return (\n            <React.Fragment>\n                {\n                    (hideDefaultNavigation) ? <Header /> : null\n                }\n                <div id=\"page\" className=\"page\">\n                    <Suspense fallback={<Loading />}>\n                        <Switch>\n                            <Route exact path=\"/\" component={Home} />\n                            <Route path=\"/about\" component={About} />\n                            <Route path=\"/menu/custom\" component={CustomGameForm} />\n                            <Route path=\"/menu/manage\" component={ManageGameTemplates} />\n                            <Route path=\"/menu\" component={GameMenu} />\n                            <Route path=\"/how-to-play\" component={HowToPlay} />\n                            <Route path=\"/settings\" component={Settings} />\n                            <Route path=\"/stats\" component={Stats} />\n    \n                            {/* https://stackoverflow.com/questions/41474134/nested-routes-with-react-router-v4-v5 */}\n                            <Route path=\"/game/:id/game-won\" component={GameWon} />\n                            <Route path=\"/game/:id\" component={Game} />\n                            <Route component={PageNotFound} />\n                        </Switch>\n                    </Suspense>\n                </div>\n                {\n                    (hideDefaultNavigation) ? <Footer /> : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withRouter(App);\n","\nexport default function isUuid(uuid: string) {\n    const regex = RegExp(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);\n    return regex.test(uuid);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.css\"\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter basename=\"/bomb-finder\">\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}