{"version":3,"sources":["pages/game-won.tsx","components/Button.tsx","logic/Animation.ts","models/GameBoardTypes.ts","util/Random.ts","logic/BombFinderPieceRenderer.ts","util/toHHMMSS.ts","assets/hourglass.svg"],"names":["GameWon","props","_this","Object","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","keepUpdating","canvas","context2D","game","stats","pieceRenderer","playAgain","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","_ref2","difficulty","width","height","bombs","newGame","wrap","_context","prev","next","Games","Create","sent","setState","gameId","id","stop","draw","delta","elapsedTime","state","lastFrame","update","fillStyle","fillRect","dimentions","drawPlaceHolder","rafId","requestAnimationFrame","loading","winningText","GetById","match","params","Statistics","GetStats","settings","defaultCellSize","gridGapSize","spinningCubes","simpleRender","vibration","timestamp","Date","switchGameTimeToOne","Math","floor","time","worstTime","bestTime","moves","totalMoves","document","getElementById","getContext","BombFinderPieceRenderer","logAndDestroy","cancelAnimationFrame","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","_components_Loading__WEBPACK_IMPORTED_MODULE_11__","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","concat","_ref3","className","toHHMMSS","src","hourglass","alt","_components_Button__WEBPACK_IMPORTED_MODULE_16__","type","text","onClick","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Button","_ref","disabled","disabledClass","classes","LoopOptions","AnimationTimer","target","step","loop","arguments","length","undefined","STOP","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","playing","timer","alternated","isComplete","REPEAT","ALTERNATE","setStep","Visibility","d","__webpack_exports__","isVisible","isMarkable","isMarked","CellState","incrementCellValue","isBomb","v","VISIBLE","VISIBLY_SATISFIED","MARKED","INVISIBLE","cell","visibility","value","cv","RandInRange","min","max","random","invisiblePieceCanvas","invisibleMarkedPieceCanvas","staticPieceCanvas","pieceAnimations","pieceLength","gapSize","exampleCellValue","setSpinningCubes","drawInvisiblePiece","i","ctx","drawVisibleCell","num","push","pow","ipcContext","impcContext","clearRect","x","y","save","restore","drawImage","hover","drawHover","index","getIndexByCell","overrideColor","beginPath","strokeStyle","drawRectangle","lineWidth","stroke","closePath","s","jump","rotation","drawRotatingSquare","worldX","worldY","cellLength","rotationDirection","radius","totalLength","translate","rotate","getValue","PI","moveTo","lineTo","quadraticCurveTo","alpha","cellValue","arc","innerX","innerY","gradient","createRadialGradient","addColorStop","fill","font","offset","ypos","xpos","textAlign","textBaseline","fillText","String","hours","minutes","seconds","timeString","module","exports","p"],"mappings":"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","file":"static/js/6.17828aff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link, RouteComponentProps, Redirect } from \"react-router-dom\";\nimport Games from \"../models/Games\";\nimport Loading from \"../components/Loading\";\nimport \"./game-won.css\";\nimport \"../components/Button.css\"\nimport hourglass from \"../assets/hourglass.svg\";\nimport BombFinderPieceRenderer from \"../logic/BombFinderPieceRenderer\";\nimport Button from \"../components/Button\";\nimport { IPreferences } from \"../models/Preferences\";\nimport toHHMMSS from \"../util/toHHMMSS\";\nimport Statistics from \"../models/Statistics\";\n\ninterface ParamProps {\n    id: string;\n}\n\ntype Props = RouteComponentProps<ParamProps>;\n\ntype State = {\n    loading: boolean,\n    dimentions: number;\n    winningText: string;\n    moves?: number,\n    time?: number,\n    difficulty?: string,\n    gameId?: string,\n    rafId?: number,\n    lastFrame?: number,\n}\n\nexport default class GameWon extends Component<Props, State> {\n\n    private keepUpdating: boolean = true;\n    private canvas?: HTMLCanvasElement;\n    private context2D?: CanvasRenderingContext2D;\n    private game?: Games;\n    private stats?: Statistics;\n    private pieceRenderer?: BombFinderPieceRenderer;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: true,\n            dimentions: 0,\n            winningText: \"\",\n        };\n    }\n\n    async componentDidMount() {\n        // TODO: Handle Error when game doesn't exist\n        this.game = await Games.GetById(this.props.match.params.id);\n        this.stats = await Statistics.GetStats(this.game.difficulty);\n        const settings: IPreferences = {\n            defaultCellSize: 120,\n            gridGapSize: 5,\n            spinningCubes: 7,\n            simpleRender: false,\n            vibration: false,\n            timestamp: new Date(),\n        };\n        let switchGameTimeToOne = false;\n        let winningText = \"You win!\";\n        if (Math.floor(this.game.time) >= this.stats.worstTime) {\n            winningText = \"New Low Score!\";\n            if (Math.floor(this.game.time) === 0) {\n                switchGameTimeToOne = true;\n                this.stats.worstTime = 1;\n            } else {\n                this.stats.worstTime = Math.floor(this.game.time);\n            }\n        }\n        if (Math.floor(this.game.time) <= this.stats.bestTime || this.stats.bestTime === 0) {\n            winningText = \"New High Score!\";\n            if (Math.floor(this.game.time) === 0) {\n                switchGameTimeToOne = true;\n                this.stats.bestTime = 1;\n            } else {\n                this.stats.bestTime = Math.floor(this.game.time);\n            }\n        }\n        if (switchGameTimeToOne) {\n            this.game.time = 1;\n        }\n        this.setState({\n            loading: false,\n            winningText,\n            moves: this.game.totalMoves,\n            time: this.game.time,\n            difficulty: this.game.difficulty,\n            lastFrame: 0,\n            dimentions: settings.defaultCellSize + 1\n        });\n        this.canvas = document.getElementById(\"piece-canvas\") as HTMLCanvasElement;\n        this.context2D = this.canvas.getContext('2d')!;\n        this.pieceRenderer = new BombFinderPieceRenderer(settings);\n        requestAnimationFrame(this.draw);\n    }\n\n    componentWillUnmount() {\n        if (this.game) {\n            this.game.logAndDestroy();\n        }\n        if (this.state.rafId) {\n            cancelAnimationFrame(this.state.rafId!);\n        }\n        this.keepUpdating = false;\n    }\n\n    playAgain = async () => {\n        const { difficulty, width, height, bombs } = this.game!;\n        const newGame = await Games.Create(difficulty, width, height, bombs);\n        this.setState({ gameId: newGame.id });\n    }\n\n    public render() {\n        if (this.state.loading) {\n            return <Loading />\n        }\n        if (this.state.gameId) {\n            return <Redirect to={`/game/${this.state.gameId}`} />\n        }\n        const { difficulty, bombs, width, height } = this.game!;\n        return (\n            <div className=\"game-won\">\n                <canvas id=\"piece-canvas\"\n                    width={this.state.dimentions}\n                    height={this.state.dimentions}>\n                    This Device doesn't support the canvas element!\n                </canvas>\n                <div className=\"game-won--statement\">{this.state.winningText}</div>\n                <div className=\"game-won--statement\">{difficulty} ({width}x{height}:{bombs})</div>\n                <div className=\"divider\" />\n                <ul className=\"game-won__stats\">\n                    <li className=\"game-won__stats__item\">\n                        <span>Moves</span>\n                        <br/>\n                        <span>{this.state.moves}</span>\n                    </li>\n                    <li className=\"game-won__stats__item\">\n                        <span>Score</span>\n                        <br/>\n                        <span>{toHHMMSS(this.state.time!)}</span>\n                    </li>\n                    <li className=\"game-won__stats__item--icon\">\n                        <img src={hourglass} alt=\"watch\" />\n                    </li>\n                    <li className=\"game-won__stats__item\">\n                        <span>Best</span>\n                        <br/>\n                        <span>{toHHMMSS(this.stats!.bestTime)}</span>\n                    </li>\n                    <li className=\"game-won__stats__item\">\n                        <span>Worst</span>\n                        <br/>\n                        <span>{toHHMMSS(this.stats!.worstTime)}</span>\n                    </li>\n                </ul>\n                <div className=\"divider\" />\n                <div className=\"game-won__options\">\n                    <Button className=\"game-won__options__item link-button\"\n                        type=\"button\"\n                        text=\"Play Again\"\n                        onClick={this.playAgain}/>\n                    <Link className=\"game-won__options__item link-button\"\n                        to=\"/\">\n                        Main Menu\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n\n    private draw = (delta: number) => {\n        const elapsedTime = delta - this.state.lastFrame!;\n        this.pieceRenderer!.update(elapsedTime);\n        this.context2D!.fillStyle = \"#333\";\n        this.context2D!.fillRect(0, 0, this.state.dimentions, this.state.dimentions);\n        this.pieceRenderer!.drawPlaceHolder(this.context2D!, 0, 0);\n        if (this.keepUpdating) {\n            this.setState({\n                rafId: requestAnimationFrame(this.draw),\n                lastFrame: delta,\n            })\n        }\n    } \n}\n","import React from 'react';\nimport \"./Button.css\"\n\ninterface Props {\n    type: \"button\" | \"submit\";\n    className?: string;\n    disabled?: boolean;\n    text: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst Button: React.FC<Props> = ({ type, disabled, className, text, onClick }) => {\n    const disabledClass = (disabled) ? \"button disabled\" : \"button\";\n    const classes = (className) ? `${className} ${disabledClass}` : disabledClass;\n    if (onClick) {\n        return <button className={classes}\n            disabled={disabled}\n            type={type}\n            onClick={onClick}>\n            {text}\n        </button>\n    }\n    return <button className={classes} disabled={disabled} type={type}>{text}</button>\n}\n\nexport default Button;","\nexport enum LoopOptions {\n    REPEAT,\n    ALTERNATE,\n    STOP\n}\n\nexport default class AnimationTimer {\n\n    private playing: boolean;\n    private timer = 0;\n    private target: number;\n    private step: number;\n    private loop: LoopOptions;\n    private alternated: boolean;\n\n    constructor(target: number, step: number, loop: LoopOptions = LoopOptions.STOP) {\n        this.timer = 0;\n        this.target = target;\n        this.step = step;\n        this.loop = loop;\n        this.alternated = false;\n        this.playing = true;\n    }\n\n    update(delta: number) {\n        if (!this.isComplete() && this.playing) {\n            this.timer += this.step;\n        } else {\n            if (this.loop === LoopOptions.REPEAT) {\n                this.timer = this.timer % this.target;\n            } else if (this.loop === LoopOptions.ALTERNATE) {\n                this.setStep(this.step * -1);\n                if (!this.alternated) {\n                    this.timer = 0;\n                } else {\n                    this.timer = this.target;\n                }\n            } else if (this.loop === LoopOptions.STOP) {\n                this.timer = this.target;\n                this.stop();\n            }\n        }\n    }\n\n    public stop() {\n        this.playing = false;\n    }\n\n    public play() {\n        this.playing = true;\n    }\n\n    public getValue() {\n        return this.timer;\n    }\n\n    public setTarget(target: number) {\n        this.target = target;\n    }\n\n    public setStep(step: number) {\n        if (step < 0) {\n            this.alternated = true;\n        } else {\n            this.alternated = false;\n        }\n        this.step = step;\n    }\n\n    public isComplete() {\n        return (this.alternated)\n            ? this.timer <= 0\n            : this.timer >= this.target;\n    }\n}","export enum Visibility {\n    INVISIBLE, // show default animation\n    VISIBLE,   // show the cell value\n    VISIBLY_SATISFIED, // show the cell's value in diffrent color\n    MARKED,    // show marked cell\n}\n\nexport const isVisible = (v: Visibility) => \n    v === Visibility.VISIBLE || v === Visibility.VISIBLY_SATISFIED;\n\nexport const isMarkable = (v: Visibility) =>\n    v === Visibility.MARKED || v === Visibility.INVISIBLE;\n\nexport const isMarked = (cell: Cell) => \n    cell.visibility === Visibility.MARKED;\n\nexport enum CellState {\n    BOMB,  // cell is a bomb\n    CLEAN, // cell is clean\n}\n\nexport type CellValue = null | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\nexport const incrementCellValue = (value?: CellValue): CellValue => {\n    switch (value) {\n        case 0: return 1;\n        case 1: return 2;\n        case 2: return 3;\n        case 3: return 4;\n        case 4: return 5;\n        case 5: return 6;\n        case 6: return 7;\n        case 7: return 8;\n        // these last 2 cases should rarely be called\n        case 8: return 8;\n        default: return null\n    }\n}\n\nexport const isBomb = (cv?: CellValue) => cv === null || cv === undefined;\n\nexport interface Cell {\n    hover: boolean;\n    visibility: Visibility;\n    readonly state: CellState;\n    readonly value?: CellValue;\n}\n","\n\nexport default function RandInRange(min: number, max: number) {\n    return Math.floor(Math.random() * max) + min;\n}","import AnimationTimer, { LoopOptions } from \"./Animation\";\nimport { Cell, Visibility, isBomb, CellValue } from \"../models/GameBoardTypes\";\nimport RandInRange from \"../util/Random\";\nimport { IPreferences } from \"../models/Preferences\";\n\nexport interface CanvasWindow {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\n/**\n * All the renderer cares about is rendering\n * a piece of the board.\n * \n * When drawing, you will pass in all the cell\n * details and it will be drawn\n */\nexport default class BombFinderPieceRenderer {\n\n    /**\n     * Invisible\n     * Invisible Marked\n     * 0 cell\n     * bomb cell\n     * 1-8 cells\n     * 1-8 cells satisfied\n     */\n    // the offsreen canvas can be this.pieceLength * 20 by this.pieceLength\n    // then when we are drawing we just grab the offset\n    // why not 3 diffrent canvases, animated get there own\n\n    // TODO: Add more off screen canvas updating\n    private invisiblePieceCanvas: HTMLCanvasElement;\n    private invisibleMarkedPieceCanvas: HTMLCanvasElement;\n    private staticPieceCanvas: HTMLCanvasElement[] = [];\n    private pieceAnimations: AnimationTimer[] = [];\n\n    private pieceLength: number;\n    private gapSize: number;\n    private simpleRender: boolean;\n    private exampleCellValue = RandInRange(0, 8);\n\n    constructor(settings: IPreferences) {\n        this.pieceLength = settings.defaultCellSize;\n        this.gapSize = settings.gridGapSize;\n        this.simpleRender = settings.simpleRender;\n        this.setSpinningCubes(settings.spinningCubes);\n        // set up canvas\n        this.invisiblePieceCanvas = document.createElement(\"canvas\");\n        this.invisiblePieceCanvas.height = this.pieceLength + 2;\n        this.invisiblePieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisiblePieceCanvas.getContext('2d')!, 1, 1);\n        this.invisibleMarkedPieceCanvas = document.createElement(\"canvas\");\n        this.invisibleMarkedPieceCanvas.height = this.pieceLength + 2;\n        this.invisibleMarkedPieceCanvas.width = this.pieceLength + 2;\n        this.drawInvisiblePiece(this.invisibleMarkedPieceCanvas.getContext('2d')!, 1, 1, \"#3396ff\");\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i] = document.createElement(\"canvas\");\n            this.staticPieceCanvas[i].width = this.pieceLength + 2;\n            this.staticPieceCanvas[i].height = this.pieceLength + 2;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 1, 1.5, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 1, 1.5, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 1, 1.5, 0);\n            } else {\n                this.drawVisibleCell(ctx, 1, 1.5, undefined);\n            }\n        }\n    }\n\n    setCellSize(value: number) {\n        this.pieceLength = value;\n        // hard code invis\n        this.invisiblePieceCanvas.height = value;\n        this.invisiblePieceCanvas.width = value;\n        // marked invis\n        this.invisibleMarkedPieceCanvas.height = value;\n        this.invisibleMarkedPieceCanvas.width = value;\n        // everything else\n        for (let i = 0; i < 18; i++) {\n            this.staticPieceCanvas[i].width = value;\n            this.staticPieceCanvas[i].height = value;\n            const ctx = this.staticPieceCanvas[i].getContext('2d')!;\n            if (i < 8) {\n                this.drawVisibleCell(ctx, 0, 0, (i + 1 as CellValue));\n            } else if (i < 16) {\n                const num: CellValue = (i % 8) + 1 as CellValue;\n                this.drawVisibleCell(ctx, 0, 0, num, \"#3396ff\");\n            } else if (i < 17) {\n                this.drawVisibleCell(ctx, 0, 0, 0);\n            } else {\n                this.drawVisibleCell(ctx, 0, 0, undefined);\n            }\n        }\n    }\n\n    setGapSize(value: number) {\n        this.gapSize = value;\n    }\n\n    setSpinningCubes(value: number) {\n        this.pieceAnimations = [];\n        for (let i = value + 1; i >= 1; i--) {\n            this.pieceAnimations.push(\n                new AnimationTimer(90 * i, Math.pow(i + 1, i * .035) - 1, LoopOptions.ALTERNATE));\n        }\n    }\n\n    setSimpleRender(value: boolean) {\n        this.simpleRender = value;\n    }\n\n    update(delta: number) {\n        if (this.simpleRender) {\n            return;\n        }\n        for (let i = 0; i < this.pieceAnimations.length; i++) {\n            this.pieceAnimations[i].update(delta);\n        }\n        // get context\n        const ipcContext = this.invisiblePieceCanvas.getContext('2d')!;\n        const impcContext = this.invisibleMarkedPieceCanvas.getContext('2d')!;\n        // clear canvas\n        ipcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        impcContext.clearRect(0, 0, this.pieceLength, this.pieceLength);\n        // draw canvas\n        this.drawInvisiblePiece(ipcContext, 1, 1);\n        this.drawInvisiblePiece(impcContext, 1, 1, \"#3396ff\");\n    }\n\n    drawPlaceHolder(ctx: CanvasRenderingContext2D, x: number, y: number, visibility: Visibility = Visibility.INVISIBLE) {\n        ctx.save();\n        switch (visibility) {\n            case Visibility.INVISIBLE: this.drawInvisiblePiece(ctx, x, y); break;\n            case Visibility.MARKED: this.drawInvisiblePiece(ctx, x, y, \"#3396ff\"); break;\n            case Visibility.VISIBLE: this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue); break;\n            case Visibility.VISIBLY_SATISFIED:\n                this.drawVisibleCell(ctx, x, y, this.exampleCellValue as CellValue, \"#3396ff\"); break;\n        }\n        ctx.restore();\n    }\n\n    drawPiece(ctx: CanvasRenderingContext2D, cell: Cell, x: number, y: number) {\n        if (cell.visibility === Visibility.INVISIBLE) {\n            ctx.drawImage(this.invisiblePieceCanvas, x, y);\n            if (cell.hover) {\n                this.drawHover(ctx, x + 1, y + 1);\n                // add this as a debug feature cause its actually cool\n                // const index = this.getIndexByCell(cell);\n                // ctx.drawImage(this.staticPieceCanvas[index], x, y);\n            }\n        } else if (cell.visibility === Visibility.MARKED) {\n            ctx.drawImage(this.invisibleMarkedPieceCanvas, x, y);\n        } else {\n            const index = this.getIndexByCell(cell);\n            ctx.drawImage(this.staticPieceCanvas[index], x, y);\n        }\n    }\n\n    private getIndexByCell(cell: Cell) {\n        if (isBomb(cell.value)) {\n            return 17;\n        } else if (cell.value === 0) {\n            return 16;\n        } else {\n            if (cell.visibility === Visibility.VISIBLY_SATISFIED) {\n                return cell.value! - 1 + 8;\n            }\n            return cell.value! - 1;\n        }\n    }\n\n    private drawInvisiblePiece(ctx: CanvasRenderingContext2D, x: number, y: number, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"#FFF\";\n        }\n        this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctx.closePath();\n        ctx.restore();\n\n        if (this.simpleRender) {\n            return;\n        }\n\n        ctx.save();\n        let s = this.pieceLength;\n        let jump = 0;\n        for (let i = 1; i < this.pieceAnimations.length; i++) {\n            const rotation = (i % 2 === 0) ? 1 : -1;\n            this.drawRotatingSquare(ctx, jump + x, jump + y, s, i, rotation, overrideColor);\n            jump += (s / 4) / 2;\n            s = (s / 4) * 3;\n        }\n        ctx.restore();\n    }\n\n    private drawRotatingSquare(ctx: CanvasRenderingContext2D, worldX: number, worldY: number, cellLength: number,\n        i: number, rotationDirection: 1 | -1, overrideColor?: string) {\n        const radius = cellLength / 8;\n        let totalLength = cellLength / 2 + (radius * 2);\n        let x = worldX + cellLength / 4 - (radius);\n        let y = worldY + cellLength / 4 - (radius);\n\n        ctx.save();\n        ctx.beginPath();\n        // Draw the rotating bits inside of the circle\n        ctx.translate(x + totalLength / 2, y + totalLength / 2);\n        ctx.rotate(this.pieceAnimations[i].getValue() *  Math.PI / 180);\n        ctx.translate((x + totalLength / 2) * -1, (y + totalLength / 2) * -1);\n        this.drawRectangle(ctx, x, y, radius, totalLength);\n        ctx.lineWidth = 2;\n        if (overrideColor) {\n            ctx.strokeStyle = overrideColor;\n        } else {\n            ctx.strokeStyle = \"gray\";\n        }\n\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    private drawRectangle(ctx: CanvasRenderingContext2D, x: number, y: number, radius: number, length: number) {\n        // start\n        ctx.moveTo(x + radius, y);\n        // top\n        ctx.lineTo(x + length - radius, y);\n        ctx.quadraticCurveTo(x + length, y, x + length, y + radius);\n        // right\n        ctx.lineTo(x + length, y + length - radius);\n        ctx.quadraticCurveTo(x + length, y + length, x + length - radius, y + length);\n        // bottom\n        ctx.lineTo(x + radius, y + length);\n        ctx.quadraticCurveTo(x, y + length, x, y + length - radius);\n        // left\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n    }\n    \n    private drawHover(ctx: CanvasRenderingContext2D, x: number, y: number) {\n        ctx.save()\n        let alpha = 1.0;\n        for (let i = 1; i <= (this.gapSize / 2); i++) {\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(255,255,255, ${alpha})`;\n            this.drawRectangle(ctx, x - i, y - i, (this.pieceLength) / 8,\n                this.pieceLength + (i * 2));\n            if ((i + 1) >= (this.gapSize / 2)) {\n                ctx.lineWidth = 1;\n            } else {\n                ctx.lineWidth = 2;\n            }\n            alpha -= 0.1;\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n\n    private drawVisibleCell(ctx: CanvasRenderingContext2D, x: number, y: number, cellValue?: CellValue, overrideColor?: string) {\n        ctx.save();\n        ctx.beginPath();\n        let length = this.pieceLength;\n        if (isBomb(cellValue)) {\n            // let radius = 3;\n            // draw the outline of the shape\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#690721\";\n            ctx.lineWidth = 4;\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n            // draw inner circle\n            ctx.save();\n            ctx.beginPath();\n            length -= 6;\n            ctx.arc(x + 3 + length / 2, y + 3 + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#f00f4b\";\n            ctx.lineWidth = 3;\n            // gradient \n\n            const innerX = x + (length / 2);\n            const innerY = y + (length / 2);\n            var gradient = ctx.createRadialGradient(\n                innerX, innerY, this.pieceLength / 6,\n                innerX, innerY, this.pieceLength / 2);\n\n            // Add three color stops\n            gradient.addColorStop(0, '#333');\n            gradient.addColorStop(1, '#690721');\n\n            // fill shap\n            ctx.fillStyle = gradient;\n            ctx.fill();\n            ctx.stroke();\n            ctx.closePath();\n            ctx.restore();\n\n        } else if (cellValue === 0) {\n            this.drawRectangle(ctx, x, y, this.pieceLength / 8, this.pieceLength);\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = \"gray\";\n        } else {\n            if (overrideColor) {\n                ctx.fillStyle = overrideColor;\n                ctx.strokeStyle = overrideColor;\n            } else {\n                ctx.fillStyle = \"#FFFFFF\";\n                ctx.strokeStyle = \"#FFFFFF\"\n            }\n            // http://www.ckollars.org/canvas-text-centering.html\n            ctx.font = `normal ${this.pieceLength}px sans-serif`;\n            // const measurements = ctx.measureText(String(cell.value));\n            const offset = (this.pieceLength / 2) + 2;\n            const ypos = y + (this.pieceLength / 2) + offset;// + this.pieceLength;\n            const xpos = x + (this.pieceLength / 2);\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"bottom\";\n            ctx.arc(x + length / 2, y + length / 2, length / 2, 0, 2 * Math.PI);\n            ctx.lineWidth = 2;\n            ctx.fillText(String(cellValue), xpos, ypos);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n}","export default function toHHMMSS(time: number) {\n    time = Math.floor(time);\n    const hours = Math.floor(time / 3600);\n    const minutes = Math.floor((time - (hours * 3600)) / 60);\n    const seconds = time - (hours * 3600) - (minutes * 60);\n    let timeString = \"\";\n\n    if (hours > 0) {\n        timeString += (hours < 10) ? `0${hours}:` : `${hours}:`;\n    }\n    timeString += (minutes < 10) ? `0${minutes}:` : `${minutes}:`;\n    timeString += (seconds < 10) ? `0${seconds}` : `${seconds}`;\n\n    return timeString;\n}","module.exports = __webpack_public_path__ + \"static/media/hourglass.63a5448b.svg\";"],"sourceRoot":""}