{"version":3,"sources":["pages/manage-templates.tsx","components/Button.tsx","models/CustomGameConfig.ts"],"names":["COLUMN_NAMES","name","key","ManageTemplates","props","_this","Object","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","deleteTemplate","_ref","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_divitoa_Program_JS_bombfinder_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","template","templates","wrap","_context","prev","next","CustomGameConfig","delete","sent","state","filter","i","id","setState","stop","_x","apply","arguments","loading","getAll","_this2","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","_components_Loading__WEBPACK_IMPORTED_MODULE_9__","dateOptions","month","day","hour","minute","className","map","n","scope","item","concat","data-column","toLocaleDateString","_components_Button__WEBPACK_IMPORTED_MODULE_10__","type","text","onClick","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","Button","disabled","disabledClass","classes","DEFAULT_TEMPLATES","width","height","bombs","Table","Field","tableName","save","config","assign","uuid","createdAt","Date","Query","cfg","remove","t","test","length","addDefaultTemplateGames","savedDefaultTemplates","isDeleted","getById","errors","keys","forEach","temp"],"mappings":"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","file":"static/js/8.9c3cdefb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport CustomGameConfig, { ICustomGameConfig } from '../models/CustomGameConfig';\nimport Loading from \"../components/Loading\";\nimport Button from \"../components/Button\";\nimport \"./manage-templates.css\";\n\ninterface State {\n    loading: boolean;\n    templates: ICustomGameConfig[];\n}\n\nconst COLUMN_NAMES: {name: string, key: keyof ICustomGameConfig }[] = [\n    { name: \"Name\", key: \"name\" },\n    { name: \"Width\", key: \"width\" },\n    { name: \"Height\", key: \"height\" },\n    { name: \"Bombs\", key: \"bombs\" },\n    { name: \"Created At\", key: \"createdAt\" },\n]\n\n/**\n * TODO: Add custom logic to deal with an empty template grid\n * Or just hide it on the main page\n * \n */\nclass ManageTemplates extends Component<{}, State> {\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            loading: true,\n            templates: [],\n        };\n    }\n\n    async componentDidMount() {\n        const templates = await CustomGameConfig.getAll();\n        this.setState({templates, loading: false});\n    }\n\n    deleteTemplate = async (template: ICustomGameConfig) => {\n        const success = await CustomGameConfig.delete(template);\n        if (success) {\n            const templates = this.state.templates.filter(i => i.id! !== template.id!);\n            this.setState({ templates });\n        } else {\n            // TODO: Add error handling\n        }\n    }\n\n    public render() {\n        if (this.state.loading) {\n            return <Loading />\n        }\n\n        const dateOptions = {\n            month: 'long', day: 'numeric',\n            hour: \"2-digit\", minute: \"2-digit\"\n        }\n\n        return <div className=\"manage-templates\">            \n            <table className=\"templates-table\">\n                <caption className=\"templates-table__caption\">Manage Templates</caption>\n                <thead>\n                    <tr className=\"templates-table__row\">\n                    {\n                        COLUMN_NAMES.map(n => <th scope=\"col\" key={n.key}>{n.name}</th>)\n                    }\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                {this.state.templates.map(item =>\n                    <tr key={item.id} className=\"templates-table__row\">\n                    {COLUMN_NAMES.map(n =>\n                        (n.key === \"createdAt\")\n                            ? <td key={`${item.id}-${n.key}`}\n                            data-column={n.name}>\n                                {(item[n.key] as Date).toLocaleDateString(\"default\", dateOptions)}\n                            </td>\n                            : <td key={`${item.id}-${n.key}`}\n                            data-column={n.name}>\n                                {item[n.key]}\n                            </td>\n                    )}\n                        <td>\n                            <Button type=\"button\" text=\"Delete\" onClick={() => this.deleteTemplate(item)} />\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n        </div>\n    }\n    \n}\n\nexport default ManageTemplates;","import React from 'react';\nimport \"./Button.css\"\n\ninterface Props {\n    type: \"button\" | \"submit\";\n    className?: string;\n    disabled?: boolean;\n    text: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\n/**\n * Taken from:\n * https://codepen.io/finnhvman/pen/zpygBB\n */\nconst Button: React.FC<Props> = ({ type, disabled, className, text, onClick }) => {\n    const disabledClass = (disabled) ? \"button disabled\" : \"button\";\n    const classes = (className) ? `${className} ${disabledClass}` : disabledClass;\n    if (onClick) {\n        return <button className={classes}\n            disabled={disabled}\n            type={type}\n            onClick={onClick}>\n            {text}\n        </button>\n    }\n    return <button className={classes} disabled={disabled} type={type}>{text}</button>\n}\n\nexport default Button;","import { Table, Field, Query, IDBTable } from \"../logic/MetaDataStorage\";\nimport uuid from \"../util/uuid\";\nimport { FormError } from \"./Types\";\n\nexport interface ICustomGameConfig {\n    id?: string;\n    width: number;\n    height: number;\n    bombs: number;\n    name?: string;\n    save?: boolean;\n    createdAt?: Date;\n}\n\nconst EASY_ID = \"00000000-0000-0000-0000-000000000001\";\nconst MEDIUM_ID = \"00000000-0000-0000-0000-000000000002\";\nconst HARD_ID = \"00000000-0000-0000-0000-000000000003\";\n\nconst DEFAULT_TEMPLATES: ICustomGameConfig[] = [\n    {\n        id: EASY_ID,\n        name: \"easy\",\n        width: 8,\n        height: 8,\n        bombs: 10,\n    },\n    {\n        id: MEDIUM_ID,\n        name: \"medium\",\n        width: 16,\n        height: 16,\n        bombs: 40,\n    },\n    {\n        id: HARD_ID,\n        name: \"hard\",\n        width: 24,\n        height: 24,\n        bombs: 99,\n    }\n];\n\n@Table(\"cgc\")\nexport default class CustomGameConfig implements ICustomGameConfig, IDBTable {\n\n    public tableName = \"cgc\";\n\n    @Field(\"cgc\", true)\n    public id: string = \"\";\n\n    @Field(\"cgc\")\n    public name?: string = undefined;\n\n    @Field(\"cgc\")\n    public width: number = 8;\n\n    @Field(\"cgc\")\n    public height: number = 8;\n\n    @Field(\"cgc\")\n    public bombs: number = 10;\n\n    @Field(\"cgc\")\n    public isDeleted: boolean = false;\n\n    @Field(\"cgc\")\n    public createdAt: Date = new Date();\n\n    public save: boolean = false;\n\n    static async save(config: ICustomGameConfig) {\n        const save = Object.assign(new CustomGameConfig(), config,\n            {id: uuid(), createdAt: new Date()});\n        return await Query.save(save);\n    }\n\n    static async delete(config: ICustomGameConfig) {\n        const cfg = Object.assign(new CustomGameConfig(), config);\n        return await Query.remove(cfg);\n    }\n\n    static async getAll(): Promise<ICustomGameConfig[]> {\n        let templates = await Query.getAll(new CustomGameConfig());\n        // check if the default objects exist\n        // if they don't, add them to the store and templates array\n        const defaultTemplates = templates\n            .filter(t => /^[0]{8}-[0]{4}-[0]{4}-[0]{4}-[0]{11}[1-3]$/.test(t.id));\n        if (defaultTemplates.length === 0) { // there is no default templates inside the tempaltes\n            const savedDefaultTemplates = await this.addDefaultTemplateGames();\n            templates = savedDefaultTemplates;\n        }\n        else {\n            // if they do, filter the templates out IF they are deleted\n            templates = templates.filter(item => !item.isDeleted)\n        }\n        return templates;\n    }\n\n    static async getById(id: string) {\n        // TODO: Error handling\n        return await Query.getById(new CustomGameConfig(), id)!;\n    }\n    \n    static validate(config: ICustomGameConfig) {\n        const errors: FormError<ICustomGameConfig> = {};\n        Object.keys(config).forEach((key) => {\n            switch (key) {\n                case 'width':\n                case 'height':\n                    if (config[key] > 50) {\n                        errors[key] = `${key} is too high!`;\n                    } else if (config[key] < 5) {\n                        errors[key] = `${key} is too low!`;\n                    }\n                    break;\n                case 'bombs':\n                    if (config.bombs > (config.width * config.height) - 1) {\n                        errors.bombs = `Too many bombs! (Max: ${(config.width * config.height) - 1})`;\n                    } else if (config.bombs < 1) {\n                        errors.bombs = \"Too few bombs! (Min: 1)\";\n                    }\n                    break;\n                case 'name':\n                    if (config.save && typeof(config.name) === \"string\" ) {\n                        if (config.name.length > 16) {\n                            errors.name = \"Name is too long!\";\n                        } else if (config.name.length === 0) {\n                            errors.name = \"Name cannot be empty!\";\n                        }\n                    }\n            }\n        });\n        return errors;\n    }\n\n    private static async addDefaultTemplateGames() {\n        const templates = DEFAULT_TEMPLATES.map(temp => \n            Object.assign(new CustomGameConfig(), temp));\n        for (let i = 0; i < templates.length; i++) {\n            await Query.save(templates[i]);\n        }\n        return templates;\n    }\n}\n\n"],"sourceRoot":""}